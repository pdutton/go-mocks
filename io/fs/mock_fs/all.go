// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/io/fs (interfaces: FileSystem,DirEntry,FS,File,FileInfo,FileMode,GlobFS,ReadDirFS,ReadDirFile,ReadFileFS,StatFS,SubFS)
//
// Generated by this command:
//
//	mockgen -destination io/fs/mock_fs/all.go -package mock_fs github.com/pdutton/go-interfaces/io/fs FileSystem,DirEntry,FS,File,FileInfo,FileMode,GlobFS,ReadDirFS,ReadDirFile,ReadFileFS,StatFS,SubFS
//

// Package mock_fs is a generated GoMock package.
package mock_fs

import (
	fs0 "io/fs"
	reflect "reflect"
	time "time"

	fs "github.com/pdutton/go-interfaces/io/fs"
	gomock "go.uber.org/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
	isgomock struct{}
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// FileInfoToDirEntry mocks base method.
func (m *MockFileSystem) FileInfoToDirEntry(arg0 fs0.FileInfo) fs.DirEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileInfoToDirEntry", arg0)
	ret0, _ := ret[0].(fs.DirEntry)
	return ret0
}

// FileInfoToDirEntry indicates an expected call of FileInfoToDirEntry.
func (mr *MockFileSystemMockRecorder) FileInfoToDirEntry(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileInfoToDirEntry", reflect.TypeOf((*MockFileSystem)(nil).FileInfoToDirEntry), arg0)
}

// FormatDirEntry mocks base method.
func (m *MockFileSystem) FormatDirEntry(arg0 fs.DirEntry) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatDirEntry", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatDirEntry indicates an expected call of FormatDirEntry.
func (mr *MockFileSystemMockRecorder) FormatDirEntry(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatDirEntry", reflect.TypeOf((*MockFileSystem)(nil).FormatDirEntry), arg0)
}

// FormatFileInfo mocks base method.
func (m *MockFileSystem) FormatFileInfo(arg0 fs0.FileInfo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatFileInfo", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatFileInfo indicates an expected call of FormatFileInfo.
func (mr *MockFileSystemMockRecorder) FormatFileInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatFileInfo", reflect.TypeOf((*MockFileSystem)(nil).FormatFileInfo), arg0)
}

// Glob mocks base method.
func (m *MockFileSystem) Glob(arg0 fs.FileSystem, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glob", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Glob indicates an expected call of Glob.
func (mr *MockFileSystemMockRecorder) Glob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glob", reflect.TypeOf((*MockFileSystem)(nil).Glob), arg0, arg1)
}

// ReadDir mocks base method.
func (m *MockFileSystem) ReadDir(arg0 fs.FileSystem, arg1 string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0, arg1)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileSystemMockRecorder) ReadDir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFileSystem)(nil).ReadDir), arg0, arg1)
}

// ReadFile mocks base method.
func (m *MockFileSystem) ReadFile(arg0 fs.FileSystem, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemMockRecorder) ReadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystem)(nil).ReadFile), arg0, arg1)
}

// Stat mocks base method.
func (m *MockFileSystem) Stat(arg0 fs.FileSystem, arg1 string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0, arg1)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileSystemMockRecorder) Stat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileSystem)(nil).Stat), arg0, arg1)
}

// Sub mocks base method.
func (m *MockFileSystem) Sub(arg0 fs.FileSystem, arg1 string) (fs.FileSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", arg0, arg1)
	ret0, _ := ret[0].(fs.FileSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sub indicates an expected call of Sub.
func (mr *MockFileSystemMockRecorder) Sub(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockFileSystem)(nil).Sub), arg0, arg1)
}

// ValidPath mocks base method.
func (m *MockFileSystem) ValidPath(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidPath", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidPath indicates an expected call of ValidPath.
func (mr *MockFileSystemMockRecorder) ValidPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidPath", reflect.TypeOf((*MockFileSystem)(nil).ValidPath), arg0)
}

// WalkDir mocks base method.
func (m *MockFileSystem) WalkDir(arg0 fs.FileSystem, arg1 string, arg2 fs0.WalkDirFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockFileSystemMockRecorder) WalkDir(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockFileSystem)(nil).WalkDir), arg0, arg1, arg2)
}

// MockDirEntry is a mock of DirEntry interface.
type MockDirEntry struct {
	ctrl     *gomock.Controller
	recorder *MockDirEntryMockRecorder
	isgomock struct{}
}

// MockDirEntryMockRecorder is the mock recorder for MockDirEntry.
type MockDirEntryMockRecorder struct {
	mock *MockDirEntry
}

// NewMockDirEntry creates a new mock instance.
func NewMockDirEntry(ctrl *gomock.Controller) *MockDirEntry {
	mock := &MockDirEntry{ctrl: ctrl}
	mock.recorder = &MockDirEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirEntry) EXPECT() *MockDirEntryMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockDirEntry) Info() (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDirEntryMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDirEntry)(nil).Info))
}

// IsDir mocks base method.
func (m *MockDirEntry) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockDirEntryMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockDirEntry)(nil).IsDir))
}

// Name mocks base method.
func (m *MockDirEntry) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDirEntryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDirEntry)(nil).Name))
}

// Nub mocks base method.
func (m *MockDirEntry) Nub() fs0.DirEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nub")
	ret0, _ := ret[0].(fs0.DirEntry)
	return ret0
}

// Nub indicates an expected call of Nub.
func (mr *MockDirEntryMockRecorder) Nub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nub", reflect.TypeOf((*MockDirEntry)(nil).Nub))
}

// Type mocks base method.
func (m *MockDirEntry) Type() fs0.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(fs0.FileMode)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDirEntryMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDirEntry)(nil).Type))
}

// format mocks base method.
func (m *MockDirEntry) format() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "format")
	ret0, _ := ret[0].(string)
	return ret0
}

// format indicates an expected call of format.
func (mr *MockDirEntryMockRecorder) format() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "format", reflect.TypeOf((*MockDirEntry)(nil).format))
}

// MockFS is a mock of FS interface.
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
	isgomock struct{}
}

// MockFSMockRecorder is the mock recorder for MockFS.
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance.
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFS)(nil).Open), name)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Read mocks base method.
func (m *MockFile) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), arg0)
}

// Stat mocks base method.
func (m *MockFile) Stat() (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// MockFileInfo is a mock of FileInfo interface.
type MockFileInfo struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoMockRecorder
	isgomock struct{}
}

// MockFileInfoMockRecorder is the mock recorder for MockFileInfo.
type MockFileInfoMockRecorder struct {
	mock *MockFileInfo
}

// NewMockFileInfo creates a new mock instance.
func NewMockFileInfo(ctrl *gomock.Controller) *MockFileInfo {
	mock := &MockFileInfo{ctrl: ctrl}
	mock.recorder = &MockFileInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfo) EXPECT() *MockFileInfoMockRecorder {
	return m.recorder
}

// IsDir mocks base method.
func (m *MockFileInfo) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileInfoMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFileInfo)(nil).IsDir))
}

// ModTime mocks base method.
func (m *MockFileInfo) ModTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime.
func (mr *MockFileInfoMockRecorder) ModTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockFileInfo)(nil).ModTime))
}

// Mode mocks base method.
func (m *MockFileInfo) Mode() fs0.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(fs0.FileMode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockFileInfoMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockFileInfo)(nil).Mode))
}

// Name mocks base method.
func (m *MockFileInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFileInfo)(nil).Name))
}

// Size mocks base method.
func (m *MockFileInfo) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockFileInfoMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFileInfo)(nil).Size))
}

// Sys mocks base method.
func (m *MockFileInfo) Sys() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(any)
	return ret0
}

// Sys indicates an expected call of Sys.
func (mr *MockFileInfoMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockFileInfo)(nil).Sys))
}

// MockFileMode is a mock of FileMode interface.
type MockFileMode struct {
	ctrl     *gomock.Controller
	recorder *MockFileModeMockRecorder
	isgomock struct{}
}

// MockFileModeMockRecorder is the mock recorder for MockFileMode.
type MockFileModeMockRecorder struct {
	mock *MockFileMode
}

// NewMockFileMode creates a new mock instance.
func NewMockFileMode(ctrl *gomock.Controller) *MockFileMode {
	mock := &MockFileMode{ctrl: ctrl}
	mock.recorder = &MockFileModeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMode) EXPECT() *MockFileModeMockRecorder {
	return m.recorder
}

// IsAppend mocks base method.
func (m *MockFileMode) IsAppend() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAppend")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAppend indicates an expected call of IsAppend.
func (mr *MockFileModeMockRecorder) IsAppend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAppend", reflect.TypeOf((*MockFileMode)(nil).IsAppend))
}

// IsCharDevice mocks base method.
func (m *MockFileMode) IsCharDevice() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCharDevice")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCharDevice indicates an expected call of IsCharDevice.
func (mr *MockFileModeMockRecorder) IsCharDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCharDevice", reflect.TypeOf((*MockFileMode)(nil).IsCharDevice))
}

// IsDevice mocks base method.
func (m *MockFileMode) IsDevice() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDevice")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDevice indicates an expected call of IsDevice.
func (mr *MockFileModeMockRecorder) IsDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDevice", reflect.TypeOf((*MockFileMode)(nil).IsDevice))
}

// IsDir mocks base method.
func (m *MockFileMode) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileModeMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFileMode)(nil).IsDir))
}

// IsExclusive mocks base method.
func (m *MockFileMode) IsExclusive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExclusive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExclusive indicates an expected call of IsExclusive.
func (mr *MockFileModeMockRecorder) IsExclusive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExclusive", reflect.TypeOf((*MockFileMode)(nil).IsExclusive))
}

// IsIrregular mocks base method.
func (m *MockFileMode) IsIrregular() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIrregular")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIrregular indicates an expected call of IsIrregular.
func (mr *MockFileModeMockRecorder) IsIrregular() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIrregular", reflect.TypeOf((*MockFileMode)(nil).IsIrregular))
}

// IsNamedPipe mocks base method.
func (m *MockFileMode) IsNamedPipe() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamedPipe")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamedPipe indicates an expected call of IsNamedPipe.
func (mr *MockFileModeMockRecorder) IsNamedPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamedPipe", reflect.TypeOf((*MockFileMode)(nil).IsNamedPipe))
}

// IsRegular mocks base method.
func (m *MockFileMode) IsRegular() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegular")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRegular indicates an expected call of IsRegular.
func (mr *MockFileModeMockRecorder) IsRegular() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegular", reflect.TypeOf((*MockFileMode)(nil).IsRegular))
}

// IsSetgid mocks base method.
func (m *MockFileMode) IsSetgid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSetgid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSetgid indicates an expected call of IsSetgid.
func (mr *MockFileModeMockRecorder) IsSetgid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSetgid", reflect.TypeOf((*MockFileMode)(nil).IsSetgid))
}

// IsSetuid mocks base method.
func (m *MockFileMode) IsSetuid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSetuid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSetuid indicates an expected call of IsSetuid.
func (mr *MockFileModeMockRecorder) IsSetuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSetuid", reflect.TypeOf((*MockFileMode)(nil).IsSetuid))
}

// IsSocket mocks base method.
func (m *MockFileMode) IsSocket() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSocket")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSocket indicates an expected call of IsSocket.
func (mr *MockFileModeMockRecorder) IsSocket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSocket", reflect.TypeOf((*MockFileMode)(nil).IsSocket))
}

// IsSticky mocks base method.
func (m *MockFileMode) IsSticky() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSticky")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSticky indicates an expected call of IsSticky.
func (mr *MockFileModeMockRecorder) IsSticky() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSticky", reflect.TypeOf((*MockFileMode)(nil).IsSticky))
}

// IsSymlink mocks base method.
func (m *MockFileMode) IsSymlink() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSymlink")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSymlink indicates an expected call of IsSymlink.
func (mr *MockFileModeMockRecorder) IsSymlink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSymlink", reflect.TypeOf((*MockFileMode)(nil).IsSymlink))
}

// IsTemporary mocks base method.
func (m *MockFileMode) IsTemporary() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTemporary")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTemporary indicates an expected call of IsTemporary.
func (mr *MockFileModeMockRecorder) IsTemporary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockFileMode)(nil).IsTemporary))
}

// Nub mocks base method.
func (m *MockFileMode) Nub() fs0.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nub")
	ret0, _ := ret[0].(fs0.FileMode)
	return ret0
}

// Nub indicates an expected call of Nub.
func (mr *MockFileModeMockRecorder) Nub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nub", reflect.TypeOf((*MockFileMode)(nil).Nub))
}

// Perm mocks base method.
func (m *MockFileMode) Perm() fs0.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perm")
	ret0, _ := ret[0].(fs0.FileMode)
	return ret0
}

// Perm indicates an expected call of Perm.
func (mr *MockFileModeMockRecorder) Perm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perm", reflect.TypeOf((*MockFileMode)(nil).Perm))
}

// String mocks base method.
func (m *MockFileMode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFileModeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFileMode)(nil).String))
}

// MockGlobFS is a mock of GlobFS interface.
type MockGlobFS struct {
	ctrl     *gomock.Controller
	recorder *MockGlobFSMockRecorder
	isgomock struct{}
}

// MockGlobFSMockRecorder is the mock recorder for MockGlobFS.
type MockGlobFSMockRecorder struct {
	mock *MockGlobFS
}

// NewMockGlobFS creates a new mock instance.
func NewMockGlobFS(ctrl *gomock.Controller) *MockGlobFS {
	mock := &MockGlobFS{ctrl: ctrl}
	mock.recorder = &MockGlobFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobFS) EXPECT() *MockGlobFSMockRecorder {
	return m.recorder
}

// Glob mocks base method.
func (m *MockGlobFS) Glob(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glob", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Glob indicates an expected call of Glob.
func (mr *MockGlobFSMockRecorder) Glob(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glob", reflect.TypeOf((*MockGlobFS)(nil).Glob), pattern)
}

// Open mocks base method.
func (m *MockGlobFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockGlobFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockGlobFS)(nil).Open), name)
}

// MockReadDirFS is a mock of ReadDirFS interface.
type MockReadDirFS struct {
	ctrl     *gomock.Controller
	recorder *MockReadDirFSMockRecorder
	isgomock struct{}
}

// MockReadDirFSMockRecorder is the mock recorder for MockReadDirFS.
type MockReadDirFSMockRecorder struct {
	mock *MockReadDirFS
}

// NewMockReadDirFS creates a new mock instance.
func NewMockReadDirFS(ctrl *gomock.Controller) *MockReadDirFS {
	mock := &MockReadDirFS{ctrl: ctrl}
	mock.recorder = &MockReadDirFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadDirFS) EXPECT() *MockReadDirFSMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockReadDirFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockReadDirFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockReadDirFS)(nil).Open), name)
}

// ReadDir mocks base method.
func (m *MockReadDirFS) ReadDir(name string) ([]fs0.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", name)
	ret0, _ := ret[0].([]fs0.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockReadDirFSMockRecorder) ReadDir(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockReadDirFS)(nil).ReadDir), name)
}

// MockReadDirFile is a mock of ReadDirFile interface.
type MockReadDirFile struct {
	ctrl     *gomock.Controller
	recorder *MockReadDirFileMockRecorder
	isgomock struct{}
}

// MockReadDirFileMockRecorder is the mock recorder for MockReadDirFile.
type MockReadDirFileMockRecorder struct {
	mock *MockReadDirFile
}

// NewMockReadDirFile creates a new mock instance.
func NewMockReadDirFile(ctrl *gomock.Controller) *MockReadDirFile {
	mock := &MockReadDirFile{ctrl: ctrl}
	mock.recorder = &MockReadDirFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadDirFile) EXPECT() *MockReadDirFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadDirFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadDirFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadDirFile)(nil).Close))
}

// Read mocks base method.
func (m *MockReadDirFile) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadDirFileMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadDirFile)(nil).Read), arg0)
}

// ReadDir mocks base method.
func (m *MockReadDirFile) ReadDir(n int) ([]fs0.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", n)
	ret0, _ := ret[0].([]fs0.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockReadDirFileMockRecorder) ReadDir(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockReadDirFile)(nil).ReadDir), n)
}

// Stat mocks base method.
func (m *MockReadDirFile) Stat() (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockReadDirFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockReadDirFile)(nil).Stat))
}

// MockReadFileFS is a mock of ReadFileFS interface.
type MockReadFileFS struct {
	ctrl     *gomock.Controller
	recorder *MockReadFileFSMockRecorder
	isgomock struct{}
}

// MockReadFileFSMockRecorder is the mock recorder for MockReadFileFS.
type MockReadFileFSMockRecorder struct {
	mock *MockReadFileFS
}

// NewMockReadFileFS creates a new mock instance.
func NewMockReadFileFS(ctrl *gomock.Controller) *MockReadFileFS {
	mock := &MockReadFileFS{ctrl: ctrl}
	mock.recorder = &MockReadFileFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadFileFS) EXPECT() *MockReadFileFSMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockReadFileFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockReadFileFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockReadFileFS)(nil).Open), name)
}

// ReadFile mocks base method.
func (m *MockReadFileFS) ReadFile(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockReadFileFSMockRecorder) ReadFile(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockReadFileFS)(nil).ReadFile), name)
}

// MockStatFS is a mock of StatFS interface.
type MockStatFS struct {
	ctrl     *gomock.Controller
	recorder *MockStatFSMockRecorder
	isgomock struct{}
}

// MockStatFSMockRecorder is the mock recorder for MockStatFS.
type MockStatFSMockRecorder struct {
	mock *MockStatFS
}

// NewMockStatFS creates a new mock instance.
func NewMockStatFS(ctrl *gomock.Controller) *MockStatFS {
	mock := &MockStatFS{ctrl: ctrl}
	mock.recorder = &MockStatFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatFS) EXPECT() *MockStatFSMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockStatFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockStatFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStatFS)(nil).Open), name)
}

// Stat mocks base method.
func (m *MockStatFS) Stat(name string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockStatFSMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockStatFS)(nil).Stat), name)
}

// MockSubFS is a mock of SubFS interface.
type MockSubFS struct {
	ctrl     *gomock.Controller
	recorder *MockSubFSMockRecorder
	isgomock struct{}
}

// MockSubFSMockRecorder is the mock recorder for MockSubFS.
type MockSubFSMockRecorder struct {
	mock *MockSubFS
}

// NewMockSubFS creates a new mock instance.
func NewMockSubFS(ctrl *gomock.Controller) *MockSubFS {
	mock := &MockSubFS{ctrl: ctrl}
	mock.recorder = &MockSubFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubFS) EXPECT() *MockSubFSMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockSubFS) Open(name string) (fs0.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(fs0.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSubFSMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSubFS)(nil).Open), name)
}

// Sub mocks base method.
func (m *MockSubFS) Sub(dir string) (fs0.FS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", dir)
	ret0, _ := ret[0].(fs0.FS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sub indicates an expected call of Sub.
func (mr *MockSubFSMockRecorder) Sub(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockSubFS)(nil).Sub), dir)
}
