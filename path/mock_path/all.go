// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/path (interfaces: Path)
//
// Generated by this command:
//
//	mockgen -destination path/mock_path/all.go github.com/pdutton/go-interfaces/path Path
//

// Package mock_path is a generated GoMock package.
package mock_path

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPath is a mock of Path interface.
type MockPath struct {
	ctrl     *gomock.Controller
	recorder *MockPathMockRecorder
	isgomock struct{}
}

// MockPathMockRecorder is the mock recorder for MockPath.
type MockPathMockRecorder struct {
	mock *MockPath
}

// NewMockPath creates a new mock instance.
func NewMockPath(ctrl *gomock.Controller) *MockPath {
	mock := &MockPath{ctrl: ctrl}
	mock.recorder = &MockPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPath) EXPECT() *MockPathMockRecorder {
	return m.recorder
}

// Base mocks base method.
func (m *MockPath) Base(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockPathMockRecorder) Base(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockPath)(nil).Base), arg0)
}

// Clean mocks base method.
func (m *MockPath) Clean(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockPathMockRecorder) Clean(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockPath)(nil).Clean), arg0)
}

// Dir mocks base method.
func (m *MockPath) Dir(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockPathMockRecorder) Dir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockPath)(nil).Dir), arg0)
}

// Ext mocks base method.
func (m *MockPath) Ext(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockPathMockRecorder) Ext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockPath)(nil).Ext), arg0)
}

// IsAbs mocks base method.
func (m *MockPath) IsAbs(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAbs", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAbs indicates an expected call of IsAbs.
func (mr *MockPathMockRecorder) IsAbs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbs", reflect.TypeOf((*MockPath)(nil).IsAbs), arg0)
}

// Join mocks base method.
func (m *MockPath) Join(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockPathMockRecorder) Join(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockPath)(nil).Join), arg0...)
}

// Match mocks base method.
func (m *MockPath) Match(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockPathMockRecorder) Match(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockPath)(nil).Match), arg0, arg1)
}

// Split mocks base method.
func (m *MockPath) Split(arg0 string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Split indicates an expected call of Split.
func (mr *MockPathMockRecorder) Split(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockPath)(nil).Split), arg0)
}
