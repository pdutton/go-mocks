// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/path/filepath (interfaces: FilePath)
//
// Generated by this command:
//
//	mockgen -destination path/filepath/mock_filepath/all.go github.com/pdutton/go-interfaces/path/filepath FilePath
//

// Package mock_filepath is a generated GoMock package.
package mock_filepath

import (
	fs "io/fs"
	filepath "path/filepath"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilePath is a mock of FilePath interface.
type MockFilePath struct {
	ctrl     *gomock.Controller
	recorder *MockFilePathMockRecorder
	isgomock struct{}
}

// MockFilePathMockRecorder is the mock recorder for MockFilePath.
type MockFilePathMockRecorder struct {
	mock *MockFilePath
}

// NewMockFilePath creates a new mock instance.
func NewMockFilePath(ctrl *gomock.Controller) *MockFilePath {
	mock := &MockFilePath{ctrl: ctrl}
	mock.recorder = &MockFilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePath) EXPECT() *MockFilePathMockRecorder {
	return m.recorder
}

// Abs mocks base method.
func (m *MockFilePath) Abs(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abs", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abs indicates an expected call of Abs.
func (mr *MockFilePathMockRecorder) Abs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abs", reflect.TypeOf((*MockFilePath)(nil).Abs), arg0)
}

// Base mocks base method.
func (m *MockFilePath) Base(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockFilePathMockRecorder) Base(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockFilePath)(nil).Base), arg0)
}

// Clean mocks base method.
func (m *MockFilePath) Clean(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockFilePathMockRecorder) Clean(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockFilePath)(nil).Clean), arg0)
}

// Dir mocks base method.
func (m *MockFilePath) Dir(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockFilePathMockRecorder) Dir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockFilePath)(nil).Dir), arg0)
}

// EvalSymlinks mocks base method.
func (m *MockFilePath) EvalSymlinks(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *MockFilePathMockRecorder) EvalSymlinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*MockFilePath)(nil).EvalSymlinks), arg0)
}

// Ext mocks base method.
func (m *MockFilePath) Ext(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockFilePathMockRecorder) Ext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockFilePath)(nil).Ext), arg0)
}

// FromSlash mocks base method.
func (m *MockFilePath) FromSlash(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromSlash", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FromSlash indicates an expected call of FromSlash.
func (mr *MockFilePathMockRecorder) FromSlash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromSlash", reflect.TypeOf((*MockFilePath)(nil).FromSlash), arg0)
}

// Glob mocks base method.
func (m *MockFilePath) Glob(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glob", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Glob indicates an expected call of Glob.
func (mr *MockFilePathMockRecorder) Glob(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glob", reflect.TypeOf((*MockFilePath)(nil).Glob), arg0)
}

// IsAbs mocks base method.
func (m *MockFilePath) IsAbs(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAbs", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAbs indicates an expected call of IsAbs.
func (mr *MockFilePathMockRecorder) IsAbs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbs", reflect.TypeOf((*MockFilePath)(nil).IsAbs), arg0)
}

// IsLocal mocks base method.
func (m *MockFilePath) IsLocal(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocal indicates an expected call of IsLocal.
func (mr *MockFilePathMockRecorder) IsLocal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocal", reflect.TypeOf((*MockFilePath)(nil).IsLocal), arg0)
}

// Join mocks base method.
func (m *MockFilePath) Join(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFilePathMockRecorder) Join(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFilePath)(nil).Join), arg0...)
}

// Localize mocks base method.
func (m *MockFilePath) Localize(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Localize", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Localize indicates an expected call of Localize.
func (mr *MockFilePathMockRecorder) Localize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Localize", reflect.TypeOf((*MockFilePath)(nil).Localize), arg0)
}

// Match mocks base method.
func (m *MockFilePath) Match(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockFilePathMockRecorder) Match(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockFilePath)(nil).Match), arg0, arg1)
}

// Rel mocks base method.
func (m *MockFilePath) Rel(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rel", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rel indicates an expected call of Rel.
func (mr *MockFilePathMockRecorder) Rel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rel", reflect.TypeOf((*MockFilePath)(nil).Rel), arg0, arg1)
}

// Split mocks base method.
func (m *MockFilePath) Split(arg0 string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Split indicates an expected call of Split.
func (mr *MockFilePathMockRecorder) Split(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockFilePath)(nil).Split), arg0)
}

// SplitList mocks base method.
func (m *MockFilePath) SplitList(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitList", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SplitList indicates an expected call of SplitList.
func (mr *MockFilePathMockRecorder) SplitList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitList", reflect.TypeOf((*MockFilePath)(nil).SplitList), arg0)
}

// ToSlash mocks base method.
func (m *MockFilePath) ToSlash(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSlash", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToSlash indicates an expected call of ToSlash.
func (mr *MockFilePathMockRecorder) ToSlash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSlash", reflect.TypeOf((*MockFilePath)(nil).ToSlash), arg0)
}

// VolumeName mocks base method.
func (m *MockFilePath) VolumeName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// VolumeName indicates an expected call of VolumeName.
func (mr *MockFilePathMockRecorder) VolumeName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeName", reflect.TypeOf((*MockFilePath)(nil).VolumeName), arg0)
}

// Walk mocks base method.
func (m *MockFilePath) Walk(arg0 string, arg1 filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockFilePathMockRecorder) Walk(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockFilePath)(nil).Walk), arg0, arg1)
}

// WalkDir mocks base method.
func (m *MockFilePath) WalkDir(arg0 string, arg1 fs.WalkDirFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockFilePathMockRecorder) WalkDir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockFilePath)(nil).WalkDir), arg0, arg1)
}
