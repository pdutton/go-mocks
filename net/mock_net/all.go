// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/net (interfaces: Addr,Conn,Dialer,IPConn,ListenConfig,Listener,Net,PacketConn,Resolver,TCPConn,TCPListener,UDPConn,UnixConn,UnixListener)
//
// Generated by this command:
//
//	mockgen -destination net/mock_net/all.go -package mock_net github.com/pdutton/go-interfaces/net Addr,Conn,Dialer,IPConn,ListenConfig,Listener,Net,PacketConn,Resolver,TCPConn,TCPListener,UDPConn,UnixConn,UnixListener
//

// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	io "io"
	net0 "net"
	netip "net/netip"
	os "os"
	reflect "reflect"
	syscall "syscall"
	time "time"

	net "github.com/pdutton/go-interfaces/net"
	gomock "go.uber.org/mock/gomock"
)

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
	isgomock struct{}
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// Network mocks base method.
func (m *MockAddr) Network() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(string)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockAddrMockRecorder) Network() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockAddr)(nil).Network))
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
	isgomock struct{}
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), b)
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
	isgomock struct{}
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockDialer) Dial(network, address string) (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockDialerMockRecorder) Dial(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockDialer)(nil).Dial), network, address)
}

// DialContext mocks base method.
func (m *MockDialer) DialContext(ctx context.Context, network, address string) (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, network, address)
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockDialerMockRecorder) DialContext(ctx, network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockDialer)(nil).DialContext), ctx, network, address)
}

// MultipathTCP mocks base method.
func (m *MockDialer) MultipathTCP() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipathTCP")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MultipathTCP indicates an expected call of MultipathTCP.
func (mr *MockDialerMockRecorder) MultipathTCP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipathTCP", reflect.TypeOf((*MockDialer)(nil).MultipathTCP))
}

// MockIPConn is a mock of IPConn interface.
type MockIPConn struct {
	ctrl     *gomock.Controller
	recorder *MockIPConnMockRecorder
	isgomock struct{}
}

// MockIPConnMockRecorder is the mock recorder for MockIPConn.
type MockIPConnMockRecorder struct {
	mock *MockIPConn
}

// NewMockIPConn creates a new mock instance.
func NewMockIPConn(ctrl *gomock.Controller) *MockIPConn {
	mock := &MockIPConn{ctrl: ctrl}
	mock.recorder = &MockIPConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPConn) EXPECT() *MockIPConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIPConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIPConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPConn)(nil).Close))
}

// File mocks base method.
func (m *MockIPConn) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockIPConnMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockIPConn)(nil).File))
}

// LocalAddr mocks base method.
func (m *MockIPConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockIPConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockIPConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockIPConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIPConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIPConn)(nil).Read), b)
}

// ReadFrom mocks base method.
func (m *MockIPConn) ReadFrom(b []byte) (int, net0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net0.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockIPConnMockRecorder) ReadFrom(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockIPConn)(nil).ReadFrom), b)
}

// ReadFromIP mocks base method.
func (m *MockIPConn) ReadFromIP(b []byte) (int, *net0.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromIP", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net0.IPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromIP indicates an expected call of ReadFromIP.
func (mr *MockIPConnMockRecorder) ReadFromIP(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromIP", reflect.TypeOf((*MockIPConn)(nil).ReadFromIP), b)
}

// ReadMsgIP mocks base method.
func (m *MockIPConn) ReadMsgIP(b, oob []byte) (int, int, int, *net0.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsgIP", b, oob)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(*net0.IPAddr)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ReadMsgIP indicates an expected call of ReadMsgIP.
func (mr *MockIPConnMockRecorder) ReadMsgIP(b, oob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsgIP", reflect.TypeOf((*MockIPConn)(nil).ReadMsgIP), b, oob)
}

// RemoteAddr mocks base method.
func (m *MockIPConn) RemoteAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockIPConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockIPConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockIPConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockIPConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockIPConn)(nil).SetDeadline), t)
}

// SetReadBuffer mocks base method.
func (m *MockIPConn) SetReadBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadBuffer indicates an expected call of SetReadBuffer.
func (mr *MockIPConnMockRecorder) SetReadBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadBuffer", reflect.TypeOf((*MockIPConn)(nil).SetReadBuffer), bytes)
}

// SetReadDeadline mocks base method.
func (m *MockIPConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockIPConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockIPConn)(nil).SetReadDeadline), t)
}

// SetWriteBuffer mocks base method.
func (m *MockIPConn) SetWriteBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteBuffer indicates an expected call of SetWriteBuffer.
func (mr *MockIPConnMockRecorder) SetWriteBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteBuffer", reflect.TypeOf((*MockIPConn)(nil).SetWriteBuffer), bytes)
}

// SetWriteDeadline mocks base method.
func (m *MockIPConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockIPConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockIPConn)(nil).SetWriteDeadline), t)
}

// SyscallConn mocks base method.
func (m *MockIPConn) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockIPConnMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockIPConn)(nil).SyscallConn))
}

// Write mocks base method.
func (m *MockIPConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIPConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIPConn)(nil).Write), b)
}

// WriteMsgIP mocks base method.
func (m *MockIPConn) WriteMsgIP(b, oob []byte, addr *net0.IPAddr) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsgIP", b, oob, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteMsgIP indicates an expected call of WriteMsgIP.
func (mr *MockIPConnMockRecorder) WriteMsgIP(b, oob, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsgIP", reflect.TypeOf((*MockIPConn)(nil).WriteMsgIP), b, oob, addr)
}

// WriteTo mocks base method.
func (m *MockIPConn) WriteTo(b []byte, addr net0.Addr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockIPConnMockRecorder) WriteTo(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockIPConn)(nil).WriteTo), b, addr)
}

// WriteToIP mocks base method.
func (m *MockIPConn) WriteToIP(b []byte, addr *net0.IPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToIP", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToIP indicates an expected call of WriteToIP.
func (mr *MockIPConnMockRecorder) WriteToIP(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToIP", reflect.TypeOf((*MockIPConn)(nil).WriteToIP), b, addr)
}

// MockListenConfig is a mock of ListenConfig interface.
type MockListenConfig struct {
	ctrl     *gomock.Controller
	recorder *MockListenConfigMockRecorder
	isgomock struct{}
}

// MockListenConfigMockRecorder is the mock recorder for MockListenConfig.
type MockListenConfigMockRecorder struct {
	mock *MockListenConfig
}

// NewMockListenConfig creates a new mock instance.
func NewMockListenConfig(ctrl *gomock.Controller) *MockListenConfig {
	mock := &MockListenConfig{ctrl: ctrl}
	mock.recorder = &MockListenConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenConfig) EXPECT() *MockListenConfigMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockListenConfig) Listen(ctx context.Context, network, address string) (net0.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, network, address)
	ret0, _ := ret[0].(net0.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockListenConfigMockRecorder) Listen(ctx, network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListenConfig)(nil).Listen), ctx, network, address)
}

// ListenPacket mocks base method.
func (m *MockListenConfig) ListenPacket(ctx context.Context, network, address string) (net0.PacketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenPacket", ctx, network, address)
	ret0, _ := ret[0].(net0.PacketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenPacket indicates an expected call of ListenPacket.
func (mr *MockListenConfigMockRecorder) ListenPacket(ctx, network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPacket", reflect.TypeOf((*MockListenConfig)(nil).ListenPacket), ctx, network, address)
}

// MultipathTCP mocks base method.
func (m *MockListenConfig) MultipathTCP() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipathTCP")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MultipathTCP indicates an expected call of MultipathTCP.
func (mr *MockListenConfigMockRecorder) MultipathTCP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipathTCP", reflect.TypeOf((*MockListenConfig)(nil).MultipathTCP))
}

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
	isgomock struct{}
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockListener) Accept() (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accept indicates an expected call of Accept.
func (mr *MockListenerMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockListener)(nil).Accept))
}

// Addr mocks base method.
func (m *MockListener) Addr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockListenerMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockListener)(nil).Addr))
}

// Close mocks base method.
func (m *MockListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListener)(nil).Close))
}

// MockNet is a mock of Net interface.
type MockNet struct {
	ctrl     *gomock.Controller
	recorder *MockNetMockRecorder
	isgomock struct{}
}

// MockNetMockRecorder is the mock recorder for MockNet.
type MockNetMockRecorder struct {
	mock *MockNet
}

// NewMockNet creates a new mock instance.
func NewMockNet(ctrl *gomock.Controller) *MockNet {
	mock := &MockNet{ctrl: ctrl}
	mock.recorder = &MockNetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNet) EXPECT() *MockNetMockRecorder {
	return m.recorder
}

// CIDRMask mocks base method.
func (m *MockNet) CIDRMask(ones, bits int) net0.IPMask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CIDRMask", ones, bits)
	ret0, _ := ret[0].(net0.IPMask)
	return ret0
}

// CIDRMask indicates an expected call of CIDRMask.
func (mr *MockNetMockRecorder) CIDRMask(ones, bits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CIDRMask", reflect.TypeOf((*MockNet)(nil).CIDRMask), ones, bits)
}

// Dial mocks base method.
func (m *MockNet) Dial(network, address string) (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockNetMockRecorder) Dial(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockNet)(nil).Dial), network, address)
}

// DialIP mocks base method.
func (m *MockNet) DialIP(network string, laddr, raddr *net0.IPAddr) (net.IPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialIP", network, laddr, raddr)
	ret0, _ := ret[0].(net.IPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialIP indicates an expected call of DialIP.
func (mr *MockNetMockRecorder) DialIP(network, laddr, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialIP", reflect.TypeOf((*MockNet)(nil).DialIP), network, laddr, raddr)
}

// DialTCP mocks base method.
func (m *MockNet) DialTCP(network string, laddr, raddr *net0.TCPAddr) (net.TCPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialTCP", network, laddr, raddr)
	ret0, _ := ret[0].(net.TCPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTCP indicates an expected call of DialTCP.
func (mr *MockNetMockRecorder) DialTCP(network, laddr, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTCP", reflect.TypeOf((*MockNet)(nil).DialTCP), network, laddr, raddr)
}

// DialTimeout mocks base method.
func (m *MockNet) DialTimeout(network, address string, timeout time.Duration) (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialTimeout", network, address, timeout)
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTimeout indicates an expected call of DialTimeout.
func (mr *MockNetMockRecorder) DialTimeout(network, address, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTimeout", reflect.TypeOf((*MockNet)(nil).DialTimeout), network, address, timeout)
}

// DialUDP mocks base method.
func (m *MockNet) DialUDP(network string, laddr, raddr *net0.UDPAddr) (net.UDPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialUDP", network, laddr, raddr)
	ret0, _ := ret[0].(net.UDPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialUDP indicates an expected call of DialUDP.
func (mr *MockNetMockRecorder) DialUDP(network, laddr, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialUDP", reflect.TypeOf((*MockNet)(nil).DialUDP), network, laddr, raddr)
}

// DialUnix mocks base method.
func (m *MockNet) DialUnix(network string, laddr, raddr *net0.UnixAddr) (net.UnixConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialUnix", network, laddr, raddr)
	ret0, _ := ret[0].(net.UnixConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialUnix indicates an expected call of DialUnix.
func (mr *MockNetMockRecorder) DialUnix(network, laddr, raddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialUnix", reflect.TypeOf((*MockNet)(nil).DialUnix), network, laddr, raddr)
}

// FileConn mocks base method.
func (m *MockNet) FileConn(f *os.File) (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileConn", f)
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileConn indicates an expected call of FileConn.
func (mr *MockNetMockRecorder) FileConn(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileConn", reflect.TypeOf((*MockNet)(nil).FileConn), f)
}

// FileListener mocks base method.
func (m *MockNet) FileListener(f *os.File) (net0.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileListener", f)
	ret0, _ := ret[0].(net0.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileListener indicates an expected call of FileListener.
func (mr *MockNetMockRecorder) FileListener(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileListener", reflect.TypeOf((*MockNet)(nil).FileListener), f)
}

// FilePacketConn mocks base method.
func (m *MockNet) FilePacketConn(f *os.File) (net0.PacketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilePacketConn", f)
	ret0, _ := ret[0].(net0.PacketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilePacketConn indicates an expected call of FilePacketConn.
func (mr *MockNetMockRecorder) FilePacketConn(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilePacketConn", reflect.TypeOf((*MockNet)(nil).FilePacketConn), f)
}

// IPv4 mocks base method.
func (m *MockNet) IPv4(a, b, c, d byte) net0.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPv4", a, b, c, d)
	ret0, _ := ret[0].(net0.IP)
	return ret0
}

// IPv4 indicates an expected call of IPv4.
func (mr *MockNetMockRecorder) IPv4(a, b, c, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPv4", reflect.TypeOf((*MockNet)(nil).IPv4), a, b, c, d)
}

// IPv4Mask mocks base method.
func (m *MockNet) IPv4Mask(a, b, c, d byte) net0.IPMask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPv4Mask", a, b, c, d)
	ret0, _ := ret[0].(net0.IPMask)
	return ret0
}

// IPv4Mask indicates an expected call of IPv4Mask.
func (mr *MockNetMockRecorder) IPv4Mask(a, b, c, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPv4Mask", reflect.TypeOf((*MockNet)(nil).IPv4Mask), a, b, c, d)
}

// InterfaceAddrs mocks base method.
func (m *MockNet) InterfaceAddrs() ([]net0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceAddrs")
	ret0, _ := ret[0].([]net0.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceAddrs indicates an expected call of InterfaceAddrs.
func (mr *MockNetMockRecorder) InterfaceAddrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceAddrs", reflect.TypeOf((*MockNet)(nil).InterfaceAddrs))
}

// InterfaceByIndex mocks base method.
func (m *MockNet) InterfaceByIndex(index int) (*net0.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceByIndex", index)
	ret0, _ := ret[0].(*net0.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceByIndex indicates an expected call of InterfaceByIndex.
func (mr *MockNetMockRecorder) InterfaceByIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceByIndex", reflect.TypeOf((*MockNet)(nil).InterfaceByIndex), index)
}

// InterfaceByName mocks base method.
func (m *MockNet) InterfaceByName(name string) (*net0.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceByName", name)
	ret0, _ := ret[0].(*net0.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceByName indicates an expected call of InterfaceByName.
func (mr *MockNetMockRecorder) InterfaceByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceByName", reflect.TypeOf((*MockNet)(nil).InterfaceByName), name)
}

// Interfaces mocks base method.
func (m *MockNet) Interfaces() ([]net0.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interfaces")
	ret0, _ := ret[0].([]net0.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interfaces indicates an expected call of Interfaces.
func (mr *MockNetMockRecorder) Interfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interfaces", reflect.TypeOf((*MockNet)(nil).Interfaces))
}

// JoinHostPort mocks base method.
func (m *MockNet) JoinHostPort(host, port string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinHostPort", host, port)
	ret0, _ := ret[0].(string)
	return ret0
}

// JoinHostPort indicates an expected call of JoinHostPort.
func (mr *MockNetMockRecorder) JoinHostPort(host, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinHostPort", reflect.TypeOf((*MockNet)(nil).JoinHostPort), host, port)
}

// Listen mocks base method.
func (m *MockNet) Listen(network, address string) (net0.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", network, address)
	ret0, _ := ret[0].(net0.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockNetMockRecorder) Listen(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockNet)(nil).Listen), network, address)
}

// ListenIP mocks base method.
func (m *MockNet) ListenIP(network string, laddr *net0.IPAddr) (net.IPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenIP", network, laddr)
	ret0, _ := ret[0].(net.IPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenIP indicates an expected call of ListenIP.
func (mr *MockNetMockRecorder) ListenIP(network, laddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenIP", reflect.TypeOf((*MockNet)(nil).ListenIP), network, laddr)
}

// ListenMulticastUDP mocks base method.
func (m *MockNet) ListenMulticastUDP(network string, ifi *net0.Interface, gaddr *net0.UDPAddr) (net.UDPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenMulticastUDP", network, ifi, gaddr)
	ret0, _ := ret[0].(net.UDPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenMulticastUDP indicates an expected call of ListenMulticastUDP.
func (mr *MockNetMockRecorder) ListenMulticastUDP(network, ifi, gaddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenMulticastUDP", reflect.TypeOf((*MockNet)(nil).ListenMulticastUDP), network, ifi, gaddr)
}

// ListenPacket mocks base method.
func (m *MockNet) ListenPacket(network, address string) (net0.PacketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenPacket", network, address)
	ret0, _ := ret[0].(net0.PacketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenPacket indicates an expected call of ListenPacket.
func (mr *MockNetMockRecorder) ListenPacket(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPacket", reflect.TypeOf((*MockNet)(nil).ListenPacket), network, address)
}

// ListenTCP mocks base method.
func (m *MockNet) ListenTCP(network string, laddr *net0.TCPAddr) (net.TCPListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenTCP", network, laddr)
	ret0, _ := ret[0].(net.TCPListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenTCP indicates an expected call of ListenTCP.
func (mr *MockNetMockRecorder) ListenTCP(network, laddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenTCP", reflect.TypeOf((*MockNet)(nil).ListenTCP), network, laddr)
}

// ListenUDP mocks base method.
func (m *MockNet) ListenUDP(network string, laddr *net0.UDPAddr) (net.UDPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenUDP", network, laddr)
	ret0, _ := ret[0].(net.UDPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenUDP indicates an expected call of ListenUDP.
func (mr *MockNetMockRecorder) ListenUDP(network, laddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenUDP", reflect.TypeOf((*MockNet)(nil).ListenUDP), network, laddr)
}

// ListenUnix mocks base method.
func (m *MockNet) ListenUnix(network string, laddr *net0.UnixAddr) (net.UnixListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenUnix", network, laddr)
	ret0, _ := ret[0].(net.UnixListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenUnix indicates an expected call of ListenUnix.
func (mr *MockNetMockRecorder) ListenUnix(network, laddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenUnix", reflect.TypeOf((*MockNet)(nil).ListenUnix), network, laddr)
}

// ListenUnixgram mocks base method.
func (m *MockNet) ListenUnixgram(network string, laddr *net0.UnixAddr) (net.UnixConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenUnixgram", network, laddr)
	ret0, _ := ret[0].(net.UnixConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenUnixgram indicates an expected call of ListenUnixgram.
func (mr *MockNetMockRecorder) ListenUnixgram(network, laddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenUnixgram", reflect.TypeOf((*MockNet)(nil).ListenUnixgram), network, laddr)
}

// LookupAddr mocks base method.
func (m *MockNet) LookupAddr(addr string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupAddr", addr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupAddr indicates an expected call of LookupAddr.
func (mr *MockNetMockRecorder) LookupAddr(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupAddr", reflect.TypeOf((*MockNet)(nil).LookupAddr), addr)
}

// LookupCNAME mocks base method.
func (m *MockNet) LookupCNAME(host string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCNAME", host)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCNAME indicates an expected call of LookupCNAME.
func (mr *MockNetMockRecorder) LookupCNAME(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCNAME", reflect.TypeOf((*MockNet)(nil).LookupCNAME), host)
}

// LookupHost mocks base method.
func (m *MockNet) LookupHost(host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHost", host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockNetMockRecorder) LookupHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockNet)(nil).LookupHost), host)
}

// LookupIP mocks base method.
func (m *MockNet) LookupIP(host string) ([]net0.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", host)
	ret0, _ := ret[0].([]net0.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIP indicates an expected call of LookupIP.
func (mr *MockNetMockRecorder) LookupIP(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockNet)(nil).LookupIP), host)
}

// LookupMX mocks base method.
func (m *MockNet) LookupMX(name string) ([]*net0.MX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", name)
	ret0, _ := ret[0].([]*net0.MX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockNetMockRecorder) LookupMX(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockNet)(nil).LookupMX), name)
}

// LookupNS mocks base method.
func (m *MockNet) LookupNS(name string) ([]*net0.NS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNS", name)
	ret0, _ := ret[0].([]*net0.NS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNS indicates an expected call of LookupNS.
func (mr *MockNetMockRecorder) LookupNS(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNS", reflect.TypeOf((*MockNet)(nil).LookupNS), name)
}

// LookupPort mocks base method.
func (m *MockNet) LookupPort(network, service string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPort", network, service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPort indicates an expected call of LookupPort.
func (mr *MockNetMockRecorder) LookupPort(network, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPort", reflect.TypeOf((*MockNet)(nil).LookupPort), network, service)
}

// LookupSRV mocks base method.
func (m *MockNet) LookupSRV(service, proto, name string) (string, []*net0.SRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", service, proto, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*net0.SRV)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupSRV indicates an expected call of LookupSRV.
func (mr *MockNetMockRecorder) LookupSRV(service, proto, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockNet)(nil).LookupSRV), service, proto, name)
}

// LookupTXT mocks base method.
func (m *MockNet) LookupTXT(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTXT", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTXT indicates an expected call of LookupTXT.
func (mr *MockNetMockRecorder) LookupTXT(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTXT", reflect.TypeOf((*MockNet)(nil).LookupTXT), name)
}

// NewDialer mocks base method.
func (m *MockNet) NewDialer(options ...net.DialerOption) net.Dialer {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDialer", varargs...)
	ret0, _ := ret[0].(net.Dialer)
	return ret0
}

// NewDialer indicates an expected call of NewDialer.
func (mr *MockNetMockRecorder) NewDialer(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDialer", reflect.TypeOf((*MockNet)(nil).NewDialer), options...)
}

// NewListenConfig mocks base method.
func (m *MockNet) NewListenConfig(options ...net.ListenConfigOption) net.ListenConfig {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewListenConfig", varargs...)
	ret0, _ := ret[0].(net.ListenConfig)
	return ret0
}

// NewListenConfig indicates an expected call of NewListenConfig.
func (mr *MockNetMockRecorder) NewListenConfig(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListenConfig", reflect.TypeOf((*MockNet)(nil).NewListenConfig), options...)
}

// NewResolver mocks base method.
func (m *MockNet) NewResolver(options ...net.ResolverOption) net.Resolver {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewResolver", varargs...)
	ret0, _ := ret[0].(net.Resolver)
	return ret0
}

// NewResolver indicates an expected call of NewResolver.
func (mr *MockNetMockRecorder) NewResolver(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResolver", reflect.TypeOf((*MockNet)(nil).NewResolver), options...)
}

// ParseCIDR mocks base method.
func (m *MockNet) ParseCIDR(s string) (net0.IP, *net0.IPNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCIDR", s)
	ret0, _ := ret[0].(net0.IP)
	ret1, _ := ret[1].(*net0.IPNet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseCIDR indicates an expected call of ParseCIDR.
func (mr *MockNetMockRecorder) ParseCIDR(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCIDR", reflect.TypeOf((*MockNet)(nil).ParseCIDR), s)
}

// ParseIP mocks base method.
func (m *MockNet) ParseIP(s string) net0.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIP", s)
	ret0, _ := ret[0].(net0.IP)
	return ret0
}

// ParseIP indicates an expected call of ParseIP.
func (mr *MockNetMockRecorder) ParseIP(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIP", reflect.TypeOf((*MockNet)(nil).ParseIP), s)
}

// Pipe mocks base method.
func (m *MockNet) Pipe() (net0.Conn, net0.Conn) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe")
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(net0.Conn)
	return ret0, ret1
}

// Pipe indicates an expected call of Pipe.
func (mr *MockNetMockRecorder) Pipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockNet)(nil).Pipe))
}

// ResolveIPAddr mocks base method.
func (m *MockNet) ResolveIPAddr(network, address string) (*net0.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIPAddr", network, address)
	ret0, _ := ret[0].(*net0.IPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIPAddr indicates an expected call of ResolveIPAddr.
func (mr *MockNetMockRecorder) ResolveIPAddr(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIPAddr", reflect.TypeOf((*MockNet)(nil).ResolveIPAddr), network, address)
}

// ResolveTCPAddr mocks base method.
func (m *MockNet) ResolveTCPAddr(network, address string) (*net0.TCPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTCPAddr", network, address)
	ret0, _ := ret[0].(*net0.TCPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTCPAddr indicates an expected call of ResolveTCPAddr.
func (mr *MockNetMockRecorder) ResolveTCPAddr(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTCPAddr", reflect.TypeOf((*MockNet)(nil).ResolveTCPAddr), network, address)
}

// ResolveUDPAddr mocks base method.
func (m *MockNet) ResolveUDPAddr(network, address string) (*net0.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUDPAddr", network, address)
	ret0, _ := ret[0].(*net0.UDPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveUDPAddr indicates an expected call of ResolveUDPAddr.
func (mr *MockNetMockRecorder) ResolveUDPAddr(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUDPAddr", reflect.TypeOf((*MockNet)(nil).ResolveUDPAddr), network, address)
}

// ResolveUnixAddr mocks base method.
func (m *MockNet) ResolveUnixAddr(network, address string) (*net0.UnixAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUnixAddr", network, address)
	ret0, _ := ret[0].(*net0.UnixAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveUnixAddr indicates an expected call of ResolveUnixAddr.
func (mr *MockNetMockRecorder) ResolveUnixAddr(network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUnixAddr", reflect.TypeOf((*MockNet)(nil).ResolveUnixAddr), network, address)
}

// SplitHostPort mocks base method.
func (m *MockNet) SplitHostPort(hostport string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitHostPort", hostport)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SplitHostPort indicates an expected call of SplitHostPort.
func (mr *MockNetMockRecorder) SplitHostPort(hostport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitHostPort", reflect.TypeOf((*MockNet)(nil).SplitHostPort), hostport)
}

// TCPAddrFromAddrPort mocks base method.
func (m *MockNet) TCPAddrFromAddrPort(addr netip.AddrPort) *net0.TCPAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPAddrFromAddrPort", addr)
	ret0, _ := ret[0].(*net0.TCPAddr)
	return ret0
}

// TCPAddrFromAddrPort indicates an expected call of TCPAddrFromAddrPort.
func (mr *MockNetMockRecorder) TCPAddrFromAddrPort(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPAddrFromAddrPort", reflect.TypeOf((*MockNet)(nil).TCPAddrFromAddrPort), addr)
}

// MockPacketConn is a mock of PacketConn interface.
type MockPacketConn struct {
	ctrl     *gomock.Controller
	recorder *MockPacketConnMockRecorder
	isgomock struct{}
}

// MockPacketConnMockRecorder is the mock recorder for MockPacketConn.
type MockPacketConnMockRecorder struct {
	mock *MockPacketConn
}

// NewMockPacketConn creates a new mock instance.
func NewMockPacketConn(ctrl *gomock.Controller) *MockPacketConn {
	mock := &MockPacketConn{ctrl: ctrl}
	mock.recorder = &MockPacketConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketConn) EXPECT() *MockPacketConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPacketConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPacketConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPacketConn)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockPacketConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockPacketConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockPacketConn)(nil).LocalAddr))
}

// ReadFrom mocks base method.
func (m *MockPacketConn) ReadFrom(p []byte) (int, net0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net0.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockPacketConnMockRecorder) ReadFrom(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockPacketConn)(nil).ReadFrom), p)
}

// SetDeadline mocks base method.
func (m *MockPacketConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockPacketConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockPacketConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockPacketConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockPacketConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockPacketConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockPacketConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockPacketConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockPacketConn)(nil).SetWriteDeadline), t)
}

// WriteTo mocks base method.
func (m *MockPacketConn) WriteTo(p []byte, addr net0.Addr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", p, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockPacketConnMockRecorder) WriteTo(p, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockPacketConn)(nil).WriteTo), p, addr)
}

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// LookupAddr mocks base method.
func (m *MockResolver) LookupAddr(ctx context.Context, addr string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupAddr", ctx, addr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupAddr indicates an expected call of LookupAddr.
func (mr *MockResolverMockRecorder) LookupAddr(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupAddr", reflect.TypeOf((*MockResolver)(nil).LookupAddr), ctx, addr)
}

// LookupCNAME mocks base method.
func (m *MockResolver) LookupCNAME(ctx context.Context, host string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCNAME", ctx, host)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCNAME indicates an expected call of LookupCNAME.
func (mr *MockResolverMockRecorder) LookupCNAME(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCNAME", reflect.TypeOf((*MockResolver)(nil).LookupCNAME), ctx, host)
}

// LookupHost mocks base method.
func (m *MockResolver) LookupHost(ctx context.Context, host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHost", ctx, host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockResolverMockRecorder) LookupHost(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockResolver)(nil).LookupHost), ctx, host)
}

// LookupIP mocks base method.
func (m *MockResolver) LookupIP(ctx context.Context, network, host string) ([]net0.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", ctx, network, host)
	ret0, _ := ret[0].([]net0.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIP indicates an expected call of LookupIP.
func (mr *MockResolverMockRecorder) LookupIP(ctx, network, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockResolver)(nil).LookupIP), ctx, network, host)
}

// LookupIPAddr mocks base method.
func (m *MockResolver) LookupIPAddr(ctx context.Context, host string) ([]net0.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIPAddr", ctx, host)
	ret0, _ := ret[0].([]net0.IPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIPAddr indicates an expected call of LookupIPAddr.
func (mr *MockResolverMockRecorder) LookupIPAddr(ctx, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIPAddr", reflect.TypeOf((*MockResolver)(nil).LookupIPAddr), ctx, host)
}

// LookupMX mocks base method.
func (m *MockResolver) LookupMX(ctx context.Context, name string) ([]*net0.MX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, name)
	ret0, _ := ret[0].([]*net0.MX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockResolverMockRecorder) LookupMX(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockResolver)(nil).LookupMX), ctx, name)
}

// LookupNS mocks base method.
func (m *MockResolver) LookupNS(ctx context.Context, name string) ([]*net0.NS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNS", ctx, name)
	ret0, _ := ret[0].([]*net0.NS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNS indicates an expected call of LookupNS.
func (mr *MockResolverMockRecorder) LookupNS(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNS", reflect.TypeOf((*MockResolver)(nil).LookupNS), ctx, name)
}

// LookupNetIP mocks base method.
func (m *MockResolver) LookupNetIP(ctx context.Context, network, host string) ([]netip.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNetIP", ctx, network, host)
	ret0, _ := ret[0].([]netip.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNetIP indicates an expected call of LookupNetIP.
func (mr *MockResolverMockRecorder) LookupNetIP(ctx, network, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNetIP", reflect.TypeOf((*MockResolver)(nil).LookupNetIP), ctx, network, host)
}

// LookupPort mocks base method.
func (m *MockResolver) LookupPort(ctx context.Context, network, service string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPort", ctx, network, service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPort indicates an expected call of LookupPort.
func (mr *MockResolverMockRecorder) LookupPort(ctx, network, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPort", reflect.TypeOf((*MockResolver)(nil).LookupPort), ctx, network, service)
}

// LookupSRV mocks base method.
func (m *MockResolver) LookupSRV(ctx context.Context, service, port, name string) (string, []*net0.SRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", ctx, service, port, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*net0.SRV)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupSRV indicates an expected call of LookupSRV.
func (mr *MockResolverMockRecorder) LookupSRV(ctx, service, port, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockResolver)(nil).LookupSRV), ctx, service, port, name)
}

// LookupTXT mocks base method.
func (m *MockResolver) LookupTXT(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTXT", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTXT indicates an expected call of LookupTXT.
func (mr *MockResolverMockRecorder) LookupTXT(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTXT", reflect.TypeOf((*MockResolver)(nil).LookupTXT), ctx, name)
}

// MockTCPConn is a mock of TCPConn interface.
type MockTCPConn struct {
	ctrl     *gomock.Controller
	recorder *MockTCPConnMockRecorder
	isgomock struct{}
}

// MockTCPConnMockRecorder is the mock recorder for MockTCPConn.
type MockTCPConnMockRecorder struct {
	mock *MockTCPConn
}

// NewMockTCPConn creates a new mock instance.
func NewMockTCPConn(ctrl *gomock.Controller) *MockTCPConn {
	mock := &MockTCPConn{ctrl: ctrl}
	mock.recorder = &MockTCPConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPConn) EXPECT() *MockTCPConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTCPConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTCPConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTCPConn)(nil).Close))
}

// CloseRead mocks base method.
func (m *MockTCPConn) CloseRead() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRead")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRead indicates an expected call of CloseRead.
func (mr *MockTCPConnMockRecorder) CloseRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRead", reflect.TypeOf((*MockTCPConn)(nil).CloseRead))
}

// CloseWrite mocks base method.
func (m *MockTCPConn) CloseWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWrite indicates an expected call of CloseWrite.
func (mr *MockTCPConnMockRecorder) CloseWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWrite", reflect.TypeOf((*MockTCPConn)(nil).CloseWrite))
}

// File mocks base method.
func (m *MockTCPConn) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockTCPConnMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockTCPConn)(nil).File))
}

// LocalAddr mocks base method.
func (m *MockTCPConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockTCPConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockTCPConn)(nil).LocalAddr))
}

// MultipathTCP mocks base method.
func (m *MockTCPConn) MultipathTCP() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipathTCP")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipathTCP indicates an expected call of MultipathTCP.
func (mr *MockTCPConnMockRecorder) MultipathTCP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipathTCP", reflect.TypeOf((*MockTCPConn)(nil).MultipathTCP))
}

// Read mocks base method.
func (m *MockTCPConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTCPConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTCPConn)(nil).Read), b)
}

// ReadFrom mocks base method.
func (m *MockTCPConn) ReadFrom(r io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockTCPConnMockRecorder) ReadFrom(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockTCPConn)(nil).ReadFrom), r)
}

// RemoteAddr mocks base method.
func (m *MockTCPConn) RemoteAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockTCPConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockTCPConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockTCPConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockTCPConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockTCPConn)(nil).SetDeadline), t)
}

// SetKeepAlive mocks base method.
func (m *MockTCPConn) SetKeepAlive(keepalive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAlive", keepalive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAlive indicates an expected call of SetKeepAlive.
func (mr *MockTCPConnMockRecorder) SetKeepAlive(keepalive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlive", reflect.TypeOf((*MockTCPConn)(nil).SetKeepAlive), keepalive)
}

// SetKeepAliveConfig mocks base method.
func (m *MockTCPConn) SetKeepAliveConfig(config net0.KeepAliveConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAliveConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAliveConfig indicates an expected call of SetKeepAliveConfig.
func (mr *MockTCPConnMockRecorder) SetKeepAliveConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAliveConfig", reflect.TypeOf((*MockTCPConn)(nil).SetKeepAliveConfig), config)
}

// SetKeepAlivePeriod mocks base method.
func (m *MockTCPConn) SetKeepAlivePeriod(d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepAlivePeriod", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepAlivePeriod indicates an expected call of SetKeepAlivePeriod.
func (mr *MockTCPConnMockRecorder) SetKeepAlivePeriod(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlivePeriod", reflect.TypeOf((*MockTCPConn)(nil).SetKeepAlivePeriod), d)
}

// SetLinger mocks base method.
func (m *MockTCPConn) SetLinger(sec int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLinger", sec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLinger indicates an expected call of SetLinger.
func (mr *MockTCPConnMockRecorder) SetLinger(sec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLinger", reflect.TypeOf((*MockTCPConn)(nil).SetLinger), sec)
}

// SetNoDelay mocks base method.
func (m *MockTCPConn) SetNoDelay(noDelay bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNoDelay", noDelay)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNoDelay indicates an expected call of SetNoDelay.
func (mr *MockTCPConnMockRecorder) SetNoDelay(noDelay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoDelay", reflect.TypeOf((*MockTCPConn)(nil).SetNoDelay), noDelay)
}

// SetReadBuffer mocks base method.
func (m *MockTCPConn) SetReadBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadBuffer indicates an expected call of SetReadBuffer.
func (mr *MockTCPConnMockRecorder) SetReadBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadBuffer", reflect.TypeOf((*MockTCPConn)(nil).SetReadBuffer), bytes)
}

// SetReadDeadline mocks base method.
func (m *MockTCPConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockTCPConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockTCPConn)(nil).SetReadDeadline), t)
}

// SetWriteBuffer mocks base method.
func (m *MockTCPConn) SetWriteBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteBuffer indicates an expected call of SetWriteBuffer.
func (mr *MockTCPConnMockRecorder) SetWriteBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteBuffer", reflect.TypeOf((*MockTCPConn)(nil).SetWriteBuffer), bytes)
}

// SetWriteDeadline mocks base method.
func (m *MockTCPConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockTCPConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockTCPConn)(nil).SetWriteDeadline), t)
}

// SyscallConn mocks base method.
func (m *MockTCPConn) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockTCPConnMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockTCPConn)(nil).SyscallConn))
}

// Write mocks base method.
func (m *MockTCPConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTCPConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTCPConn)(nil).Write), b)
}

// WriteTo mocks base method.
func (m *MockTCPConn) WriteTo(w io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", w)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockTCPConnMockRecorder) WriteTo(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockTCPConn)(nil).WriteTo), w)
}

// MockTCPListener is a mock of TCPListener interface.
type MockTCPListener struct {
	ctrl     *gomock.Controller
	recorder *MockTCPListenerMockRecorder
	isgomock struct{}
}

// MockTCPListenerMockRecorder is the mock recorder for MockTCPListener.
type MockTCPListenerMockRecorder struct {
	mock *MockTCPListener
}

// NewMockTCPListener creates a new mock instance.
func NewMockTCPListener(ctrl *gomock.Controller) *MockTCPListener {
	mock := &MockTCPListener{ctrl: ctrl}
	mock.recorder = &MockTCPListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPListener) EXPECT() *MockTCPListenerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockTCPListener) Accept() (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accept indicates an expected call of Accept.
func (mr *MockTCPListenerMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockTCPListener)(nil).Accept))
}

// AcceptTCP mocks base method.
func (m *MockTCPListener) AcceptTCP() (net.TCPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTCP")
	ret0, _ := ret[0].(net.TCPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTCP indicates an expected call of AcceptTCP.
func (mr *MockTCPListenerMockRecorder) AcceptTCP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTCP", reflect.TypeOf((*MockTCPListener)(nil).AcceptTCP))
}

// Addr mocks base method.
func (m *MockTCPListener) Addr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockTCPListenerMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockTCPListener)(nil).Addr))
}

// Close mocks base method.
func (m *MockTCPListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTCPListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTCPListener)(nil).Close))
}

// File mocks base method.
func (m *MockTCPListener) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockTCPListenerMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockTCPListener)(nil).File))
}

// SetDeadline mocks base method.
func (m *MockTCPListener) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockTCPListenerMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockTCPListener)(nil).SetDeadline), t)
}

// SyscallConn mocks base method.
func (m *MockTCPListener) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockTCPListenerMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockTCPListener)(nil).SyscallConn))
}

// MockUDPConn is a mock of UDPConn interface.
type MockUDPConn struct {
	ctrl     *gomock.Controller
	recorder *MockUDPConnMockRecorder
	isgomock struct{}
}

// MockUDPConnMockRecorder is the mock recorder for MockUDPConn.
type MockUDPConnMockRecorder struct {
	mock *MockUDPConn
}

// NewMockUDPConn creates a new mock instance.
func NewMockUDPConn(ctrl *gomock.Controller) *MockUDPConn {
	mock := &MockUDPConn{ctrl: ctrl}
	mock.recorder = &MockUDPConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPConn) EXPECT() *MockUDPConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUDPConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUDPConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUDPConn)(nil).Close))
}

// File mocks base method.
func (m *MockUDPConn) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockUDPConnMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockUDPConn)(nil).File))
}

// LocalAddr mocks base method.
func (m *MockUDPConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockUDPConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockUDPConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockUDPConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockUDPConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUDPConn)(nil).Read), b)
}

// ReadFrom mocks base method.
func (m *MockUDPConn) ReadFrom(b []byte) (int, net0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net0.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockUDPConnMockRecorder) ReadFrom(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockUDPConn)(nil).ReadFrom), b)
}

// ReadFromUDP mocks base method.
func (m *MockUDPConn) ReadFromUDP(b []byte) (int, *net0.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDP", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net0.UDPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDP indicates an expected call of ReadFromUDP.
func (mr *MockUDPConnMockRecorder) ReadFromUDP(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDP", reflect.TypeOf((*MockUDPConn)(nil).ReadFromUDP), b)
}

// ReadFromUDPAddrPort mocks base method.
func (m *MockUDPConn) ReadFromUDPAddrPort(b []byte) (int, netip.AddrPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDPAddrPort", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(netip.AddrPort)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDPAddrPort indicates an expected call of ReadFromUDPAddrPort.
func (mr *MockUDPConnMockRecorder) ReadFromUDPAddrPort(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDPAddrPort", reflect.TypeOf((*MockUDPConn)(nil).ReadFromUDPAddrPort), b)
}

// ReadMsgUDP mocks base method.
func (m *MockUDPConn) ReadMsgUDP(b, oob []byte) (int, int, int, *net0.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsgUDP", b, oob)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(*net0.UDPAddr)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ReadMsgUDP indicates an expected call of ReadMsgUDP.
func (mr *MockUDPConnMockRecorder) ReadMsgUDP(b, oob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsgUDP", reflect.TypeOf((*MockUDPConn)(nil).ReadMsgUDP), b, oob)
}

// ReadMsgUDPAddrPort mocks base method.
func (m *MockUDPConn) ReadMsgUDPAddrPort(b, oob []byte) (int, int, int, netip.AddrPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsgUDPAddrPort", b, oob)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(netip.AddrPort)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ReadMsgUDPAddrPort indicates an expected call of ReadMsgUDPAddrPort.
func (mr *MockUDPConnMockRecorder) ReadMsgUDPAddrPort(b, oob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsgUDPAddrPort", reflect.TypeOf((*MockUDPConn)(nil).ReadMsgUDPAddrPort), b, oob)
}

// RemoteAddr mocks base method.
func (m *MockUDPConn) RemoteAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockUDPConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockUDPConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockUDPConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockUDPConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockUDPConn)(nil).SetDeadline), t)
}

// SetReadBuffer mocks base method.
func (m *MockUDPConn) SetReadBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadBuffer indicates an expected call of SetReadBuffer.
func (mr *MockUDPConnMockRecorder) SetReadBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadBuffer", reflect.TypeOf((*MockUDPConn)(nil).SetReadBuffer), bytes)
}

// SetReadDeadline mocks base method.
func (m *MockUDPConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockUDPConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockUDPConn)(nil).SetReadDeadline), t)
}

// SetWriteBuffer mocks base method.
func (m *MockUDPConn) SetWriteBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteBuffer indicates an expected call of SetWriteBuffer.
func (mr *MockUDPConnMockRecorder) SetWriteBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteBuffer", reflect.TypeOf((*MockUDPConn)(nil).SetWriteBuffer), bytes)
}

// SetWriteDeadline mocks base method.
func (m *MockUDPConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockUDPConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockUDPConn)(nil).SetWriteDeadline), t)
}

// SyscallConn mocks base method.
func (m *MockUDPConn) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockUDPConnMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockUDPConn)(nil).SyscallConn))
}

// Write mocks base method.
func (m *MockUDPConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockUDPConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUDPConn)(nil).Write), b)
}

// WriteMsgUDP mocks base method.
func (m *MockUDPConn) WriteMsgUDP(b, oob []byte, addr *net0.UDPAddr) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsgUDP", b, oob, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteMsgUDP indicates an expected call of WriteMsgUDP.
func (mr *MockUDPConnMockRecorder) WriteMsgUDP(b, oob, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsgUDP", reflect.TypeOf((*MockUDPConn)(nil).WriteMsgUDP), b, oob, addr)
}

// WriteMsgUDPAddrPort mocks base method.
func (m *MockUDPConn) WriteMsgUDPAddrPort(b, oob []byte, addr netip.AddrPort) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsgUDPAddrPort", b, oob, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteMsgUDPAddrPort indicates an expected call of WriteMsgUDPAddrPort.
func (mr *MockUDPConnMockRecorder) WriteMsgUDPAddrPort(b, oob, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsgUDPAddrPort", reflect.TypeOf((*MockUDPConn)(nil).WriteMsgUDPAddrPort), b, oob, addr)
}

// WriteTo mocks base method.
func (m *MockUDPConn) WriteTo(b []byte, addr net0.Addr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockUDPConnMockRecorder) WriteTo(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockUDPConn)(nil).WriteTo), b, addr)
}

// WriteToUDP mocks base method.
func (m *MockUDPConn) WriteToUDP(b []byte, addr *net0.UDPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDP", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDP indicates an expected call of WriteToUDP.
func (mr *MockUDPConnMockRecorder) WriteToUDP(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDP", reflect.TypeOf((*MockUDPConn)(nil).WriteToUDP), b, addr)
}

// WriteToUDPAddrPort mocks base method.
func (m *MockUDPConn) WriteToUDPAddrPort(b []byte, addr netip.AddrPort) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDPAddrPort", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDPAddrPort indicates an expected call of WriteToUDPAddrPort.
func (mr *MockUDPConnMockRecorder) WriteToUDPAddrPort(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDPAddrPort", reflect.TypeOf((*MockUDPConn)(nil).WriteToUDPAddrPort), b, addr)
}

// MockUnixConn is a mock of UnixConn interface.
type MockUnixConn struct {
	ctrl     *gomock.Controller
	recorder *MockUnixConnMockRecorder
	isgomock struct{}
}

// MockUnixConnMockRecorder is the mock recorder for MockUnixConn.
type MockUnixConnMockRecorder struct {
	mock *MockUnixConn
}

// NewMockUnixConn creates a new mock instance.
func NewMockUnixConn(ctrl *gomock.Controller) *MockUnixConn {
	mock := &MockUnixConn{ctrl: ctrl}
	mock.recorder = &MockUnixConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnixConn) EXPECT() *MockUnixConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUnixConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUnixConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUnixConn)(nil).Close))
}

// CloseRead mocks base method.
func (m *MockUnixConn) CloseRead() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRead")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRead indicates an expected call of CloseRead.
func (mr *MockUnixConnMockRecorder) CloseRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRead", reflect.TypeOf((*MockUnixConn)(nil).CloseRead))
}

// CloseWrite mocks base method.
func (m *MockUnixConn) CloseWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWrite indicates an expected call of CloseWrite.
func (mr *MockUnixConnMockRecorder) CloseWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWrite", reflect.TypeOf((*MockUnixConn)(nil).CloseWrite))
}

// File mocks base method.
func (m *MockUnixConn) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockUnixConnMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockUnixConn)(nil).File))
}

// LocalAddr mocks base method.
func (m *MockUnixConn) LocalAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockUnixConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockUnixConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockUnixConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockUnixConnMockRecorder) Read(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUnixConn)(nil).Read), b)
}

// ReadFrom mocks base method.
func (m *MockUnixConn) ReadFrom(b []byte) (int, net0.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net0.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockUnixConnMockRecorder) ReadFrom(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockUnixConn)(nil).ReadFrom), b)
}

// ReadFromUnix mocks base method.
func (m *MockUnixConn) ReadFromUnix(b []byte) (int, *net0.UnixAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUnix", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net0.UnixAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUnix indicates an expected call of ReadFromUnix.
func (mr *MockUnixConnMockRecorder) ReadFromUnix(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUnix", reflect.TypeOf((*MockUnixConn)(nil).ReadFromUnix), b)
}

// ReadMsgUnix mocks base method.
func (m *MockUnixConn) ReadMsgUnix(b, oob []byte) (int, int, int, *net0.UnixAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMsgUnix", b, oob)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(*net0.UnixAddr)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ReadMsgUnix indicates an expected call of ReadMsgUnix.
func (mr *MockUnixConnMockRecorder) ReadMsgUnix(b, oob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsgUnix", reflect.TypeOf((*MockUnixConn)(nil).ReadMsgUnix), b, oob)
}

// RemoteAddr mocks base method.
func (m *MockUnixConn) RemoteAddr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockUnixConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockUnixConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockUnixConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockUnixConnMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockUnixConn)(nil).SetDeadline), t)
}

// SetReadBuffer mocks base method.
func (m *MockUnixConn) SetReadBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadBuffer indicates an expected call of SetReadBuffer.
func (mr *MockUnixConnMockRecorder) SetReadBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadBuffer", reflect.TypeOf((*MockUnixConn)(nil).SetReadBuffer), bytes)
}

// SetReadDeadline mocks base method.
func (m *MockUnixConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockUnixConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockUnixConn)(nil).SetReadDeadline), t)
}

// SetWriteBuffer mocks base method.
func (m *MockUnixConn) SetWriteBuffer(bytes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteBuffer", bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteBuffer indicates an expected call of SetWriteBuffer.
func (mr *MockUnixConnMockRecorder) SetWriteBuffer(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteBuffer", reflect.TypeOf((*MockUnixConn)(nil).SetWriteBuffer), bytes)
}

// SetWriteDeadline mocks base method.
func (m *MockUnixConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockUnixConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockUnixConn)(nil).SetWriteDeadline), t)
}

// SyscallConn mocks base method.
func (m *MockUnixConn) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockUnixConnMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockUnixConn)(nil).SyscallConn))
}

// Write mocks base method.
func (m *MockUnixConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockUnixConnMockRecorder) Write(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUnixConn)(nil).Write), b)
}

// WriteMsgUnix mocks base method.
func (m *MockUnixConn) WriteMsgUnix(b, oob []byte, addr *net0.UnixAddr) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMsgUnix", b, oob, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteMsgUnix indicates an expected call of WriteMsgUnix.
func (mr *MockUnixConnMockRecorder) WriteMsgUnix(b, oob, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsgUnix", reflect.TypeOf((*MockUnixConn)(nil).WriteMsgUnix), b, oob, addr)
}

// WriteTo mocks base method.
func (m *MockUnixConn) WriteTo(b []byte, addr net0.Addr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockUnixConnMockRecorder) WriteTo(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockUnixConn)(nil).WriteTo), b, addr)
}

// WriteToUnix mocks base method.
func (m *MockUnixConn) WriteToUnix(b []byte, addr *net0.UnixAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUnix", b, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUnix indicates an expected call of WriteToUnix.
func (mr *MockUnixConnMockRecorder) WriteToUnix(b, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUnix", reflect.TypeOf((*MockUnixConn)(nil).WriteToUnix), b, addr)
}

// MockUnixListener is a mock of UnixListener interface.
type MockUnixListener struct {
	ctrl     *gomock.Controller
	recorder *MockUnixListenerMockRecorder
	isgomock struct{}
}

// MockUnixListenerMockRecorder is the mock recorder for MockUnixListener.
type MockUnixListenerMockRecorder struct {
	mock *MockUnixListener
}

// NewMockUnixListener creates a new mock instance.
func NewMockUnixListener(ctrl *gomock.Controller) *MockUnixListener {
	mock := &MockUnixListener{ctrl: ctrl}
	mock.recorder = &MockUnixListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnixListener) EXPECT() *MockUnixListenerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockUnixListener) Accept() (net0.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(net0.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accept indicates an expected call of Accept.
func (mr *MockUnixListenerMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockUnixListener)(nil).Accept))
}

// AcceptUnix mocks base method.
func (m *MockUnixListener) AcceptUnix() (net.UnixConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUnix")
	ret0, _ := ret[0].(net.UnixConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptUnix indicates an expected call of AcceptUnix.
func (mr *MockUnixListenerMockRecorder) AcceptUnix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUnix", reflect.TypeOf((*MockUnixListener)(nil).AcceptUnix))
}

// Addr mocks base method.
func (m *MockUnixListener) Addr() net0.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net0.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *MockUnixListenerMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockUnixListener)(nil).Addr))
}

// Close mocks base method.
func (m *MockUnixListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUnixListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUnixListener)(nil).Close))
}

// File mocks base method.
func (m *MockUnixListener) File() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockUnixListenerMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockUnixListener)(nil).File))
}

// SetDeadline mocks base method.
func (m *MockUnixListener) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockUnixListenerMockRecorder) SetDeadline(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockUnixListener)(nil).SetDeadline), t)
}

// SetUnlinkOnClose mocks base method.
func (m *MockUnixListener) SetUnlinkOnClose(unlink bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUnlinkOnClose", unlink)
}

// SetUnlinkOnClose indicates an expected call of SetUnlinkOnClose.
func (mr *MockUnixListenerMockRecorder) SetUnlinkOnClose(unlink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnlinkOnClose", reflect.TypeOf((*MockUnixListener)(nil).SetUnlinkOnClose), unlink)
}

// SyscallConn mocks base method.
func (m *MockUnixListener) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockUnixListenerMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockUnixListener)(nil).SyscallConn))
}
