// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/net/http (interfaces: HTTP)
//
// Generated by this command:
//
//	mockgen -destination net/http/mock/http.go github.com/pdutton/go-interfaces/net/http HTTP
//

// Package mock_http is a generated GoMock package.
package mock_http

import (
	bufio "bufio"
	io "io"
	fs "io/fs"
	net "net"
	http0 "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	http "github.com/pdutton/go-interfaces/net/http"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTP is a mock of HTTP interface.
type MockHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMockRecorder
	isgomock struct{}
}

// MockHTTPMockRecorder is the mock recorder for MockHTTP.
type MockHTTPMockRecorder struct {
	mock *MockHTTP
}

// NewMockHTTP creates a new mock instance.
func NewMockHTTP(ctrl *gomock.Controller) *MockHTTP {
	mock := &MockHTTP{ctrl: ctrl}
	mock.recorder = &MockHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTP) EXPECT() *MockHTTPMockRecorder {
	return m.recorder
}

// CanonicalHeaderKey mocks base method.
func (m *MockHTTP) CanonicalHeaderKey(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanonicalHeaderKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CanonicalHeaderKey indicates an expected call of CanonicalHeaderKey.
func (mr *MockHTTPMockRecorder) CanonicalHeaderKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanonicalHeaderKey", reflect.TypeOf((*MockHTTP)(nil).CanonicalHeaderKey), arg0)
}

// DetectContentType mocks base method.
func (m *MockHTTP) DetectContentType(arg0 []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectContentType", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetectContentType indicates an expected call of DetectContentType.
func (mr *MockHTTPMockRecorder) DetectContentType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectContentType", reflect.TypeOf((*MockHTTP)(nil).DetectContentType), arg0)
}

// Error mocks base method.
func (m *MockHTTP) Error(arg0 http0.ResponseWriter, arg1 string, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1, arg2)
}

// Error indicates an expected call of Error.
func (mr *MockHTTPMockRecorder) Error(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHTTP)(nil).Error), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockHTTP) Get(arg0 string) (http.ClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(http.ClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTP)(nil).Get), arg0)
}

// Handle mocks base method.
func (m *MockHTTP) Handle(arg0 string, arg1 http0.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0, arg1)
}

// Handle indicates an expected call of Handle.
func (mr *MockHTTPMockRecorder) Handle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHTTP)(nil).Handle), arg0, arg1)
}

// HandleFunc mocks base method.
func (m *MockHTTP) HandleFunc(arg0 string, arg1 func(http0.ResponseWriter, *http0.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFunc", arg0, arg1)
}

// HandleFunc indicates an expected call of HandleFunc.
func (mr *MockHTTPMockRecorder) HandleFunc(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockHTTP)(nil).HandleFunc), arg0, arg1)
}

// Head mocks base method.
func (m *MockHTTP) Head(arg0 string) (http.ClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(http.ClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockHTTPMockRecorder) Head(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHTTP)(nil).Head), arg0)
}

// ListenAndServe mocks base method.
func (m *MockHTTP) ListenAndServe(arg0 string, arg1 http0.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockHTTPMockRecorder) ListenAndServe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockHTTP)(nil).ListenAndServe), arg0, arg1)
}

// ListenAndServeTLS mocks base method.
func (m *MockHTTP) ListenAndServeTLS(arg0, arg1, arg2 string, arg3 http0.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServeTLS", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServeTLS indicates an expected call of ListenAndServeTLS.
func (mr *MockHTTPMockRecorder) ListenAndServeTLS(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServeTLS", reflect.TypeOf((*MockHTTP)(nil).ListenAndServeTLS), arg0, arg1, arg2, arg3)
}

// MaxBytesReader mocks base method.
func (m *MockHTTP) MaxBytesReader(arg0 http0.ResponseWriter, arg1 io.ReadCloser, arg2 int64) io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxBytesReader", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// MaxBytesReader indicates an expected call of MaxBytesReader.
func (mr *MockHTTPMockRecorder) MaxBytesReader(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxBytesReader", reflect.TypeOf((*MockHTTP)(nil).MaxBytesReader), arg0, arg1, arg2)
}

// NotFound mocks base method.
func (m *MockHTTP) NotFound(arg0 http0.ResponseWriter, arg1 *http0.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotFound", arg0, arg1)
}

// NotFound indicates an expected call of NotFound.
func (mr *MockHTTPMockRecorder) NotFound(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockHTTP)(nil).NotFound), arg0, arg1)
}

// ParseHTTPVersion mocks base method.
func (m *MockHTTP) ParseHTTPVersion(arg0 string) (int, int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHTTPVersion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ParseHTTPVersion indicates an expected call of ParseHTTPVersion.
func (mr *MockHTTPMockRecorder) ParseHTTPVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHTTPVersion", reflect.TypeOf((*MockHTTP)(nil).ParseHTTPVersion), arg0)
}

// ParseTime mocks base method.
func (m *MockHTTP) ParseTime(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTime indicates an expected call of ParseTime.
func (mr *MockHTTPMockRecorder) ParseTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTime", reflect.TypeOf((*MockHTTP)(nil).ParseTime), arg0)
}

// Post mocks base method.
func (m *MockHTTP) Post(arg0, arg1 string, arg2 io.Reader) (http.ClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.ClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPMockRecorder) Post(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTP)(nil).Post), arg0, arg1, arg2)
}

// PostForm mocks base method.
func (m *MockHTTP) PostForm(arg0 string, arg1 url.Values) (http.ClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", arg0, arg1)
	ret0, _ := ret[0].(http.ClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockHTTPMockRecorder) PostForm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockHTTP)(nil).PostForm), arg0, arg1)
}

// ProxyFromEnvironment mocks base method.
func (m *MockHTTP) ProxyFromEnvironment(arg0 *http0.Request) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyFromEnvironment", arg0)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyFromEnvironment indicates an expected call of ProxyFromEnvironment.
func (mr *MockHTTPMockRecorder) ProxyFromEnvironment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyFromEnvironment", reflect.TypeOf((*MockHTTP)(nil).ProxyFromEnvironment), arg0)
}

// ProxyURL mocks base method.
func (m *MockHTTP) ProxyURL(arg0 *url.URL) func(*http0.Request) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyURL", arg0)
	ret0, _ := ret[0].(func(*http0.Request) (*url.URL, error))
	return ret0
}

// ProxyURL indicates an expected call of ProxyURL.
func (mr *MockHTTPMockRecorder) ProxyURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyURL", reflect.TypeOf((*MockHTTP)(nil).ProxyURL), arg0)
}

// ReadResponse mocks base method.
func (m *MockHTTP) ReadResponse(arg0 *bufio.Reader, arg1 *http0.Request) (http.ClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadResponse", arg0, arg1)
	ret0, _ := ret[0].(http.ClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadResponse indicates an expected call of ReadResponse.
func (mr *MockHTTPMockRecorder) ReadResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadResponse", reflect.TypeOf((*MockHTTP)(nil).ReadResponse), arg0, arg1)
}

// Redirect mocks base method.
func (m *MockHTTP) Redirect(arg0 http0.ResponseWriter, arg1 *http0.Request, arg2 string, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", arg0, arg1, arg2, arg3)
}

// Redirect indicates an expected call of Redirect.
func (mr *MockHTTPMockRecorder) Redirect(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockHTTP)(nil).Redirect), arg0, arg1, arg2, arg3)
}

// Serve mocks base method.
func (m *MockHTTP) Serve(arg0 net.Listener, arg1 http0.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockHTTPMockRecorder) Serve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockHTTP)(nil).Serve), arg0, arg1)
}

// ServeContent mocks base method.
func (m *MockHTTP) ServeContent(arg0 http0.ResponseWriter, arg1 *http0.Request, arg2 string, arg3 time.Time, arg4 io.ReadSeeker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeContent", arg0, arg1, arg2, arg3, arg4)
}

// ServeContent indicates an expected call of ServeContent.
func (mr *MockHTTPMockRecorder) ServeContent(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeContent", reflect.TypeOf((*MockHTTP)(nil).ServeContent), arg0, arg1, arg2, arg3, arg4)
}

// ServeFile mocks base method.
func (m *MockHTTP) ServeFile(arg0 http0.ResponseWriter, arg1 *http0.Request, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeFile", arg0, arg1, arg2)
}

// ServeFile indicates an expected call of ServeFile.
func (mr *MockHTTPMockRecorder) ServeFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeFile", reflect.TypeOf((*MockHTTP)(nil).ServeFile), arg0, arg1, arg2)
}

// ServeFileFS mocks base method.
func (m *MockHTTP) ServeFileFS(arg0 http0.ResponseWriter, arg1 *http0.Request, arg2 fs.FS, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeFileFS", arg0, arg1, arg2, arg3)
}

// ServeFileFS indicates an expected call of ServeFileFS.
func (mr *MockHTTPMockRecorder) ServeFileFS(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeFileFS", reflect.TypeOf((*MockHTTP)(nil).ServeFileFS), arg0, arg1, arg2, arg3)
}

// ServeTLS mocks base method.
func (m *MockHTTP) ServeTLS(arg0 net.Listener, arg1 http0.Handler, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeTLS", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeTLS indicates an expected call of ServeTLS.
func (mr *MockHTTPMockRecorder) ServeTLS(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeTLS", reflect.TypeOf((*MockHTTP)(nil).ServeTLS), arg0, arg1, arg2, arg3)
}

// SetCookie mocks base method.
func (m *MockHTTP) SetCookie(arg0 http0.ResponseWriter, arg1 *http0.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", arg0, arg1)
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockHTTPMockRecorder) SetCookie(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockHTTP)(nil).SetCookie), arg0, arg1)
}

// StatusText mocks base method.
func (m *MockHTTP) StatusText(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusText", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusText indicates an expected call of StatusText.
func (mr *MockHTTPMockRecorder) StatusText(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusText", reflect.TypeOf((*MockHTTP)(nil).StatusText), arg0)
}
