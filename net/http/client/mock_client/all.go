// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/net/http/client (interfaces: HTTP,Client,Request,Response)
//
// Generated by this command:
//
//	mockgen -destination net/http/client/mock_client/all.go -package mock_http github.com/pdutton/go-interfaces/net/http/client HTTP,Client,Request,Response
//

// Package mock_http is a generated GoMock package.
package mock_http

import (
	bufio "bufio"
	tls "crypto/tls"
	io "io"
	http0 "net/http"
	url "net/url"
	reflect "reflect"

	http "github.com/pdutton/go-interfaces/net/http/client"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTP is a mock of HTTP interface.
type MockHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMockRecorder
	isgomock struct{}
}

// MockHTTPMockRecorder is the mock recorder for MockHTTP.
type MockHTTPMockRecorder struct {
	mock *MockHTTP
}

// NewMockHTTP creates a new mock instance.
func NewMockHTTP(ctrl *gomock.Controller) *MockHTTP {
	mock := &MockHTTP{ctrl: ctrl}
	mock.recorder = &MockHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTP) EXPECT() *MockHTTPMockRecorder {
	return m.recorder
}

// CanonicalHeaderKey mocks base method.
func (m *MockHTTP) CanonicalHeaderKey(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanonicalHeaderKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CanonicalHeaderKey indicates an expected call of CanonicalHeaderKey.
func (mr *MockHTTPMockRecorder) CanonicalHeaderKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanonicalHeaderKey", reflect.TypeOf((*MockHTTP)(nil).CanonicalHeaderKey), arg0)
}

// Get mocks base method.
func (m *MockHTTP) Get(arg0 string) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTP)(nil).Get), arg0)
}

// Head mocks base method.
func (m *MockHTTP) Head(arg0 string) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockHTTPMockRecorder) Head(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHTTP)(nil).Head), arg0)
}

// Post mocks base method.
func (m *MockHTTP) Post(arg0, arg1 string, arg2 io.Reader) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPMockRecorder) Post(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTP)(nil).Post), arg0, arg1, arg2)
}

// PostForm mocks base method.
func (m *MockHTTP) PostForm(arg0 string, arg1 url.Values) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", arg0, arg1)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockHTTPMockRecorder) PostForm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockHTTP)(nil).PostForm), arg0, arg1)
}

// ReadResponse mocks base method.
func (m *MockHTTP) ReadResponse(arg0 *bufio.Reader, arg1 *http0.Request) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadResponse", arg0, arg1)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadResponse indicates an expected call of ReadResponse.
func (mr *MockHTTPMockRecorder) ReadResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadResponse", reflect.TypeOf((*MockHTTP)(nil).ReadResponse), arg0, arg1)
}

// StatusText mocks base method.
func (m *MockHTTP) StatusText(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusText", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusText indicates an expected call of StatusText.
func (mr *MockHTTPMockRecorder) StatusText(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusText", reflect.TypeOf((*MockHTTP)(nil).StatusText), arg0)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CloseIdleConnections mocks base method.
func (m *MockClient) CloseIdleConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseIdleConnections")
}

// CloseIdleConnections indicates an expected call of CloseIdleConnections.
func (mr *MockClientMockRecorder) CloseIdleConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIdleConnections", reflect.TypeOf((*MockClient)(nil).CloseIdleConnections))
}

// Do mocks base method.
func (m *MockClient) Do(arg0 *http0.Request) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), arg0)
}

// Get mocks base method.
func (m *MockClient) Get(arg0 string) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0)
}

// Head mocks base method.
func (m *MockClient) Head(arg0 string) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockClientMockRecorder) Head(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockClient)(nil).Head), arg0)
}

// Post mocks base method.
func (m *MockClient) Post(arg0, arg1 string, arg2 io.Reader) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockClientMockRecorder) Post(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockClient)(nil).Post), arg0, arg1, arg2)
}

// PostForm mocks base method.
func (m *MockClient) PostForm(arg0 string, arg1 url.Values) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", arg0, arg1)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockClientMockRecorder) PostForm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockClient)(nil).PostForm), arg0, arg1)
}

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
	isgomock struct{}
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockRequest) Write(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockRequestMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRequest)(nil).Write), arg0)
}

// WriteProxy mocks base method.
func (m *MockRequest) WriteProxy(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProxy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProxy indicates an expected call of WriteProxy.
func (mr *MockRequestMockRecorder) WriteProxy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProxy", reflect.TypeOf((*MockRequest)(nil).WriteProxy), arg0)
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
	isgomock struct{}
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockResponse) Body() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockResponseMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockResponse)(nil).Body))
}

// Close mocks base method.
func (m *MockResponse) Close() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockResponseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResponse)(nil).Close))
}

// ContentLength mocks base method.
func (m *MockResponse) ContentLength() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentLength")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ContentLength indicates an expected call of ContentLength.
func (mr *MockResponseMockRecorder) ContentLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentLength", reflect.TypeOf((*MockResponse)(nil).ContentLength))
}

// Cookies mocks base method.
func (m *MockResponse) Cookies() []*http0.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookies")
	ret0, _ := ret[0].([]*http0.Cookie)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockResponseMockRecorder) Cookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockResponse)(nil).Cookies))
}

// Header mocks base method.
func (m *MockResponse) Header() http0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http0.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockResponseMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResponse)(nil).Header))
}

// Location mocks base method.
func (m *MockResponse) Location() (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Location indicates an expected call of Location.
func (mr *MockResponseMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockResponse)(nil).Location))
}

// Proto mocks base method.
func (m *MockResponse) Proto() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(string)
	return ret0
}

// Proto indicates an expected call of Proto.
func (mr *MockResponseMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockResponse)(nil).Proto))
}

// ProtoAtLeast mocks base method.
func (m *MockResponse) ProtoAtLeast(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoAtLeast", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProtoAtLeast indicates an expected call of ProtoAtLeast.
func (mr *MockResponseMockRecorder) ProtoAtLeast(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoAtLeast", reflect.TypeOf((*MockResponse)(nil).ProtoAtLeast), arg0, arg1)
}

// ProtoMajor mocks base method.
func (m *MockResponse) ProtoMajor() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoMajor")
	ret0, _ := ret[0].(int)
	return ret0
}

// ProtoMajor indicates an expected call of ProtoMajor.
func (mr *MockResponseMockRecorder) ProtoMajor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMajor", reflect.TypeOf((*MockResponse)(nil).ProtoMajor))
}

// ProtoMinor mocks base method.
func (m *MockResponse) ProtoMinor() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoMinor")
	ret0, _ := ret[0].(int)
	return ret0
}

// ProtoMinor indicates an expected call of ProtoMinor.
func (mr *MockResponseMockRecorder) ProtoMinor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMinor", reflect.TypeOf((*MockResponse)(nil).ProtoMinor))
}

// Request mocks base method.
func (m *MockResponse) Request() http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(http.Request)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockResponseMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockResponse)(nil).Request))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}

// TLS mocks base method.
func (m *MockResponse) TLS() *tls.ConnectionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLS")
	ret0, _ := ret[0].(*tls.ConnectionState)
	return ret0
}

// TLS indicates an expected call of TLS.
func (mr *MockResponseMockRecorder) TLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLS", reflect.TypeOf((*MockResponse)(nil).TLS))
}

// Trailer mocks base method.
func (m *MockResponse) Trailer() http0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(http0.Header)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockResponseMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockResponse)(nil).Trailer))
}

// TransferEncoding mocks base method.
func (m *MockResponse) TransferEncoding() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferEncoding")
	ret0, _ := ret[0].([]string)
	return ret0
}

// TransferEncoding indicates an expected call of TransferEncoding.
func (mr *MockResponseMockRecorder) TransferEncoding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferEncoding", reflect.TypeOf((*MockResponse)(nil).TransferEncoding))
}

// Uncompressed mocks base method.
func (m *MockResponse) Uncompressed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uncompressed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Uncompressed indicates an expected call of Uncompressed.
func (mr *MockResponseMockRecorder) Uncompressed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncompressed", reflect.TypeOf((*MockResponse)(nil).Uncompressed))
}

// Write mocks base method.
func (m *MockResponse) Write(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockResponseMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponse)(nil).Write), arg0)
}
