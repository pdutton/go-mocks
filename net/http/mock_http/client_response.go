// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/net/http (interfaces: ClientResponse)
//
// Generated by this command:
//
//	mockgen -destination net/http/mock_http/client_response.go github.com/pdutton/go-interfaces/net/http ClientResponse
//

// Package mock_http is a generated GoMock package.
package mock_http

import (
	tls "crypto/tls"
	io "io"
	http0 "net/http"
	url "net/url"
	reflect "reflect"

	http "github.com/pdutton/go-interfaces/net/http"
	gomock "go.uber.org/mock/gomock"
)

// MockClientResponse is a mock of ClientResponse interface.
type MockClientResponse struct {
	ctrl     *gomock.Controller
	recorder *MockClientResponseMockRecorder
	isgomock struct{}
}

// MockClientResponseMockRecorder is the mock recorder for MockClientResponse.
type MockClientResponseMockRecorder struct {
	mock *MockClientResponse
}

// NewMockClientResponse creates a new mock instance.
func NewMockClientResponse(ctrl *gomock.Controller) *MockClientResponse {
	mock := &MockClientResponse{ctrl: ctrl}
	mock.recorder = &MockClientResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientResponse) EXPECT() *MockClientResponseMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockClientResponse) Body() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockClientResponseMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockClientResponse)(nil).Body))
}

// Close mocks base method.
func (m *MockClientResponse) Close() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientResponseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientResponse)(nil).Close))
}

// ContentLength mocks base method.
func (m *MockClientResponse) ContentLength() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentLength")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ContentLength indicates an expected call of ContentLength.
func (mr *MockClientResponseMockRecorder) ContentLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentLength", reflect.TypeOf((*MockClientResponse)(nil).ContentLength))
}

// Cookies mocks base method.
func (m *MockClientResponse) Cookies() []*http0.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookies")
	ret0, _ := ret[0].([]*http0.Cookie)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockClientResponseMockRecorder) Cookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockClientResponse)(nil).Cookies))
}

// Header mocks base method.
func (m *MockClientResponse) Header() http0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http0.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockClientResponseMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockClientResponse)(nil).Header))
}

// Location mocks base method.
func (m *MockClientResponse) Location() (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Location indicates an expected call of Location.
func (mr *MockClientResponseMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockClientResponse)(nil).Location))
}

// Proto mocks base method.
func (m *MockClientResponse) Proto() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(string)
	return ret0
}

// Proto indicates an expected call of Proto.
func (mr *MockClientResponseMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockClientResponse)(nil).Proto))
}

// ProtoAtLeast mocks base method.
func (m *MockClientResponse) ProtoAtLeast(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoAtLeast", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProtoAtLeast indicates an expected call of ProtoAtLeast.
func (mr *MockClientResponseMockRecorder) ProtoAtLeast(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoAtLeast", reflect.TypeOf((*MockClientResponse)(nil).ProtoAtLeast), arg0, arg1)
}

// ProtoMajor mocks base method.
func (m *MockClientResponse) ProtoMajor() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoMajor")
	ret0, _ := ret[0].(int)
	return ret0
}

// ProtoMajor indicates an expected call of ProtoMajor.
func (mr *MockClientResponseMockRecorder) ProtoMajor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMajor", reflect.TypeOf((*MockClientResponse)(nil).ProtoMajor))
}

// ProtoMinor mocks base method.
func (m *MockClientResponse) ProtoMinor() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoMinor")
	ret0, _ := ret[0].(int)
	return ret0
}

// ProtoMinor indicates an expected call of ProtoMinor.
func (mr *MockClientResponseMockRecorder) ProtoMinor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMinor", reflect.TypeOf((*MockClientResponse)(nil).ProtoMinor))
}

// Request mocks base method.
func (m *MockClientResponse) Request() http.ClientRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(http.ClientRequest)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockClientResponseMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockClientResponse)(nil).Request))
}

// Status mocks base method.
func (m *MockClientResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockClientResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClientResponse)(nil).Status))
}

// StatusCode mocks base method.
func (m *MockClientResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockClientResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockClientResponse)(nil).StatusCode))
}

// TLS mocks base method.
func (m *MockClientResponse) TLS() *tls.ConnectionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLS")
	ret0, _ := ret[0].(*tls.ConnectionState)
	return ret0
}

// TLS indicates an expected call of TLS.
func (mr *MockClientResponseMockRecorder) TLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLS", reflect.TypeOf((*MockClientResponse)(nil).TLS))
}

// Trailer mocks base method.
func (m *MockClientResponse) Trailer() http0.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(http0.Header)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockClientResponseMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockClientResponse)(nil).Trailer))
}

// TransferEncoding mocks base method.
func (m *MockClientResponse) TransferEncoding() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferEncoding")
	ret0, _ := ret[0].([]string)
	return ret0
}

// TransferEncoding indicates an expected call of TransferEncoding.
func (mr *MockClientResponseMockRecorder) TransferEncoding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferEncoding", reflect.TypeOf((*MockClientResponse)(nil).TransferEncoding))
}

// Uncompressed mocks base method.
func (m *MockClientResponse) Uncompressed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uncompressed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Uncompressed indicates an expected call of Uncompressed.
func (mr *MockClientResponseMockRecorder) Uncompressed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncompressed", reflect.TypeOf((*MockClientResponse)(nil).Uncompressed))
}

// Write mocks base method.
func (m *MockClientResponse) Write(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockClientResponseMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClientResponse)(nil).Write), arg0)
}
