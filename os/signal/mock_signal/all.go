// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/os/signal (interfaces: Signal)
//
// Generated by this command:
//
//	mockgen -destination os/signal/mock_signal/all.go -package mock_signal github.com/pdutton/go-interfaces/os/signal Signal
//

// Package mock_signal is a generated GoMock package.
package mock_signal

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSignal is a mock of Signal interface.
type MockSignal struct {
	ctrl     *gomock.Controller
	recorder *MockSignalMockRecorder
	isgomock struct{}
}

// MockSignalMockRecorder is the mock recorder for MockSignal.
type MockSignalMockRecorder struct {
	mock *MockSignal
}

// NewMockSignal creates a new mock instance.
func NewMockSignal(ctrl *gomock.Controller) *MockSignal {
	mock := &MockSignal{ctrl: ctrl}
	mock.recorder = &MockSignalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignal) EXPECT() *MockSignalMockRecorder {
	return m.recorder
}

// Ignore mocks base method.
func (m *MockSignal) Ignore(sig ...os.Signal) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Ignore", varargs...)
}

// Ignore indicates an expected call of Ignore.
func (mr *MockSignalMockRecorder) Ignore(sig ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockSignal)(nil).Ignore), sig...)
}

// Ignored mocks base method.
func (m *MockSignal) Ignored(sig os.Signal) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ignored", sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ignored indicates an expected call of Ignored.
func (mr *MockSignalMockRecorder) Ignored(sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignored", reflect.TypeOf((*MockSignal)(nil).Ignored), sig)
}

// Notify mocks base method.
func (m *MockSignal) Notify(c chan<- os.Signal, sig ...os.Signal) {
	m.ctrl.T.Helper()
	varargs := []any{c}
	for _, a := range sig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Notify", varargs...)
}

// Notify indicates an expected call of Notify.
func (mr *MockSignalMockRecorder) Notify(c any, sig ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{c}, sig...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSignal)(nil).Notify), varargs...)
}

// NotifyContext mocks base method.
func (m *MockSignal) NotifyContext(parent context.Context, signals ...os.Signal) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	varargs := []any{parent}
	for _, a := range signals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyContext", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// NotifyContext indicates an expected call of NotifyContext.
func (mr *MockSignalMockRecorder) NotifyContext(parent any, signals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{parent}, signals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyContext", reflect.TypeOf((*MockSignal)(nil).NotifyContext), varargs...)
}

// Reset mocks base method.
func (m *MockSignal) Reset(sig ...os.Signal) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range sig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Reset", varargs...)
}

// Reset indicates an expected call of Reset.
func (mr *MockSignalMockRecorder) Reset(sig ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSignal)(nil).Reset), sig...)
}

// Stop mocks base method.
func (m *MockSignal) Stop(c chan<- os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", c)
}

// Stop indicates an expected call of Stop.
func (mr *MockSignalMockRecorder) Stop(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSignal)(nil).Stop), c)
}
