// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/os (interfaces: File,FileInfo,OS,Process,Root)
//
// Generated by this command:
//
//	mockgen -destination os/mock_os/all.go github.com/pdutton/go-interfaces/os File,FileInfo,OS,Process,Root
//

// Package mock_os is a generated GoMock package.
package mock_os

import (
	io "io"
	fs0 "io/fs"
	os0 "os"
	reflect "reflect"
	syscall "syscall"
	time "time"

	fs "github.com/pdutton/go-interfaces/io/fs"
	os "github.com/pdutton/go-interfaces/os"
	gomock "go.uber.org/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Chdir mocks base method.
func (m *MockFile) Chdir() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir")
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir.
func (mr *MockFileMockRecorder) Chdir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockFile)(nil).Chdir))
}

// Chmod mocks base method.
func (m *MockFile) Chmod(arg0 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockFileMockRecorder) Chmod(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockFile)(nil).Chmod), arg0)
}

// Chown mocks base method.
func (m *MockFile) Chown(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockFileMockRecorder) Chown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockFile)(nil).Chown), arg0, arg1)
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Fd mocks base method.
func (m *MockFile) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockFileMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockFile)(nil).Fd))
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Read mocks base method.
func (m *MockFile) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), arg0)
}

// ReadAt mocks base method.
func (m *MockFile) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockFileMockRecorder) ReadAt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), arg0, arg1)
}

// ReadDir mocks base method.
func (m *MockFile) ReadDir(arg0 int) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileMockRecorder) ReadDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFile)(nil).ReadDir), arg0)
}

// ReadFrom mocks base method.
func (m *MockFile) ReadFrom(arg0 io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockFileMockRecorder) ReadFrom(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockFile)(nil).ReadFrom), arg0)
}

// Readdir mocks base method.
func (m *MockFile) Readdir(arg0 int) ([]fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readdir", arg0)
	ret0, _ := ret[0].([]fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readdir indicates an expected call of Readdir.
func (mr *MockFileMockRecorder) Readdir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readdir", reflect.TypeOf((*MockFile)(nil).Readdir), arg0)
}

// Readdirnames mocks base method.
func (m *MockFile) Readdirnames(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readdirnames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readdirnames indicates an expected call of Readdirnames.
func (mr *MockFileMockRecorder) Readdirnames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readdirnames", reflect.TypeOf((*MockFile)(nil).Readdirnames), arg0)
}

// Seek mocks base method.
func (m *MockFile) Seek(arg0 int64, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileMockRecorder) Seek(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), arg0, arg1)
}

// SetDeadline mocks base method.
func (m *MockFile) SetDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockFileMockRecorder) SetDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockFile)(nil).SetDeadline), arg0)
}

// SetReadDeadline mocks base method.
func (m *MockFile) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockFileMockRecorder) SetReadDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockFile)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method.
func (m *MockFile) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockFileMockRecorder) SetWriteDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockFile)(nil).SetWriteDeadline), arg0)
}

// Stat mocks base method.
func (m *MockFile) Stat() (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// Sync mocks base method.
func (m *MockFile) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockFileMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockFile)(nil).Sync))
}

// SyscallConn mocks base method.
func (m *MockFile) SyscallConn() (syscall.RawConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyscallConn")
	ret0, _ := ret[0].(syscall.RawConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyscallConn indicates an expected call of SyscallConn.
func (mr *MockFileMockRecorder) SyscallConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyscallConn", reflect.TypeOf((*MockFile)(nil).SyscallConn))
}

// Truncate mocks base method.
func (m *MockFile) Truncate(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockFileMockRecorder) Truncate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockFile)(nil).Truncate), arg0)
}

// Write mocks base method.
func (m *MockFile) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockFileMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFile)(nil).Write), arg0)
}

// WriteAt mocks base method.
func (m *MockFile) WriteAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockFileMockRecorder) WriteAt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), arg0, arg1)
}

// WriteString mocks base method.
func (m *MockFile) WriteString(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString.
func (mr *MockFileMockRecorder) WriteString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockFile)(nil).WriteString), arg0)
}

// WriteTo mocks base method.
func (m *MockFile) WriteTo(arg0 io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockFileMockRecorder) WriteTo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockFile)(nil).WriteTo), arg0)
}

// MockFileInfo is a mock of FileInfo interface.
type MockFileInfo struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoMockRecorder
	isgomock struct{}
}

// MockFileInfoMockRecorder is the mock recorder for MockFileInfo.
type MockFileInfoMockRecorder struct {
	mock *MockFileInfo
}

// NewMockFileInfo creates a new mock instance.
func NewMockFileInfo(ctrl *gomock.Controller) *MockFileInfo {
	mock := &MockFileInfo{ctrl: ctrl}
	mock.recorder = &MockFileInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfo) EXPECT() *MockFileInfoMockRecorder {
	return m.recorder
}

// IsDir mocks base method.
func (m *MockFileInfo) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileInfoMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFileInfo)(nil).IsDir))
}

// ModTime mocks base method.
func (m *MockFileInfo) ModTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime.
func (mr *MockFileInfoMockRecorder) ModTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockFileInfo)(nil).ModTime))
}

// Mode mocks base method.
func (m *MockFileInfo) Mode() fs0.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(fs0.FileMode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockFileInfoMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockFileInfo)(nil).Mode))
}

// Name mocks base method.
func (m *MockFileInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFileInfo)(nil).Name))
}

// Size mocks base method.
func (m *MockFileInfo) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockFileInfoMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFileInfo)(nil).Size))
}

// Sys mocks base method.
func (m *MockFileInfo) Sys() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(any)
	return ret0
}

// Sys indicates an expected call of Sys.
func (mr *MockFileInfoMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockFileInfo)(nil).Sys))
}

// MockOS is a mock of OS interface.
type MockOS struct {
	ctrl     *gomock.Controller
	recorder *MockOSMockRecorder
	isgomock struct{}
}

// MockOSMockRecorder is the mock recorder for MockOS.
type MockOSMockRecorder struct {
	mock *MockOS
}

// NewMockOS creates a new mock instance.
func NewMockOS(ctrl *gomock.Controller) *MockOS {
	mock := &MockOS{ctrl: ctrl}
	mock.recorder = &MockOSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOS) EXPECT() *MockOSMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockOS) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockOSMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockOS)(nil).Args))
}

// Chdir mocks base method.
func (m *MockOS) Chdir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir.
func (mr *MockOSMockRecorder) Chdir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockOS)(nil).Chdir), arg0)
}

// Chmod mocks base method.
func (m *MockOS) Chmod(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockOSMockRecorder) Chmod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockOS)(nil).Chmod), arg0, arg1)
}

// Chown mocks base method.
func (m *MockOS) Chown(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockOSMockRecorder) Chown(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockOS)(nil).Chown), arg0, arg1, arg2)
}

// Chtimes mocks base method.
func (m *MockOS) Chtimes(arg0 string, arg1, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chtimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes.
func (mr *MockOSMockRecorder) Chtimes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockOS)(nil).Chtimes), arg0, arg1, arg2)
}

// Clearenv mocks base method.
func (m *MockOS) Clearenv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clearenv")
}

// Clearenv indicates an expected call of Clearenv.
func (mr *MockOSMockRecorder) Clearenv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clearenv", reflect.TypeOf((*MockOS)(nil).Clearenv))
}

// CopyFS mocks base method.
func (m *MockOS) CopyFS(arg0 string, arg1 fs0.FS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFS indicates an expected call of CopyFS.
func (mr *MockOSMockRecorder) CopyFS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFS", reflect.TypeOf((*MockOS)(nil).CopyFS), arg0, arg1)
}

// Create mocks base method.
func (m *MockOS) Create(arg0 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOSMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOS)(nil).Create), arg0)
}

// CreateTemp mocks base method.
func (m *MockOS) CreateTemp(arg0, arg1 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemp", arg0, arg1)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemp indicates an expected call of CreateTemp.
func (mr *MockOSMockRecorder) CreateTemp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemp", reflect.TypeOf((*MockOS)(nil).CreateTemp), arg0, arg1)
}

// DirFS mocks base method.
func (m *MockOS) DirFS(arg0 string) fs0.FS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirFS", arg0)
	ret0, _ := ret[0].(fs0.FS)
	return ret0
}

// DirFS indicates an expected call of DirFS.
func (mr *MockOSMockRecorder) DirFS(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirFS", reflect.TypeOf((*MockOS)(nil).DirFS), arg0)
}

// Environ mocks base method.
func (m *MockOS) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockOSMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockOS)(nil).Environ))
}

// Executable mocks base method.
func (m *MockOS) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable.
func (mr *MockOSMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockOS)(nil).Executable))
}

// Exit mocks base method.
func (m *MockOS) Exit(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exit", arg0)
}

// Exit indicates an expected call of Exit.
func (mr *MockOSMockRecorder) Exit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockOS)(nil).Exit), arg0)
}

// Expand mocks base method.
func (m *MockOS) Expand(arg0 string, arg1 func(string) string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Expand indicates an expected call of Expand.
func (mr *MockOSMockRecorder) Expand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockOS)(nil).Expand), arg0, arg1)
}

// ExpandEnv mocks base method.
func (m *MockOS) ExpandEnv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandEnv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpandEnv indicates an expected call of ExpandEnv.
func (mr *MockOSMockRecorder) ExpandEnv(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandEnv", reflect.TypeOf((*MockOS)(nil).ExpandEnv), arg0)
}

// FindProcess mocks base method.
func (m *MockOS) FindProcess(arg0 int) (os.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProcess", arg0)
	ret0, _ := ret[0].(os.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcess indicates an expected call of FindProcess.
func (mr *MockOSMockRecorder) FindProcess(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcess", reflect.TypeOf((*MockOS)(nil).FindProcess), arg0)
}

// Getegid mocks base method.
func (m *MockOS) Getegid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getegid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getegid indicates an expected call of Getegid.
func (mr *MockOSMockRecorder) Getegid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getegid", reflect.TypeOf((*MockOS)(nil).Getegid))
}

// Getenv mocks base method.
func (m *MockOS) Getenv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockOSMockRecorder) Getenv(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockOS)(nil).Getenv), arg0)
}

// Geteuid mocks base method.
func (m *MockOS) Geteuid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Geteuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Geteuid indicates an expected call of Geteuid.
func (mr *MockOSMockRecorder) Geteuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Geteuid", reflect.TypeOf((*MockOS)(nil).Geteuid))
}

// Getgid mocks base method.
func (m *MockOS) Getgid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getgid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getgid indicates an expected call of Getgid.
func (mr *MockOSMockRecorder) Getgid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getgid", reflect.TypeOf((*MockOS)(nil).Getgid))
}

// Getgroups mocks base method.
func (m *MockOS) Getgroups() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getgroups")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getgroups indicates an expected call of Getgroups.
func (mr *MockOSMockRecorder) Getgroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getgroups", reflect.TypeOf((*MockOS)(nil).Getgroups))
}

// Getpagesize mocks base method.
func (m *MockOS) Getpagesize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getpagesize")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getpagesize indicates an expected call of Getpagesize.
func (mr *MockOSMockRecorder) Getpagesize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getpagesize", reflect.TypeOf((*MockOS)(nil).Getpagesize))
}

// Getpid mocks base method.
func (m *MockOS) Getpid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getpid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getpid indicates an expected call of Getpid.
func (mr *MockOSMockRecorder) Getpid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getpid", reflect.TypeOf((*MockOS)(nil).Getpid))
}

// Getppid mocks base method.
func (m *MockOS) Getppid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getppid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getppid indicates an expected call of Getppid.
func (mr *MockOSMockRecorder) Getppid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getppid", reflect.TypeOf((*MockOS)(nil).Getppid))
}

// Getuid mocks base method.
func (m *MockOS) Getuid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getuid indicates an expected call of Getuid.
func (mr *MockOSMockRecorder) Getuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getuid", reflect.TypeOf((*MockOS)(nil).Getuid))
}

// Getwd mocks base method.
func (m *MockOS) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockOSMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockOS)(nil).Getwd))
}

// Hostname mocks base method.
func (m *MockOS) Hostname() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hostname indicates an expected call of Hostname.
func (mr *MockOSMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockOS)(nil).Hostname))
}

// IsExist mocks base method.
func (m *MockOS) IsExist(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockOSMockRecorder) IsExist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockOS)(nil).IsExist), arg0)
}

// IsNotExist mocks base method.
func (m *MockOS) IsNotExist(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockOSMockRecorder) IsNotExist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockOS)(nil).IsNotExist), arg0)
}

// IsPathSeparator mocks base method.
func (m *MockOS) IsPathSeparator(arg0 uint8) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathSeparator", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPathSeparator indicates an expected call of IsPathSeparator.
func (mr *MockOSMockRecorder) IsPathSeparator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathSeparator", reflect.TypeOf((*MockOS)(nil).IsPathSeparator), arg0)
}

// IsPermission mocks base method.
func (m *MockOS) IsPermission(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPermission", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPermission indicates an expected call of IsPermission.
func (mr *MockOSMockRecorder) IsPermission(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPermission", reflect.TypeOf((*MockOS)(nil).IsPermission), arg0)
}

// IsTimeout mocks base method.
func (m *MockOS) IsTimeout(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTimeout", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTimeout indicates an expected call of IsTimeout.
func (mr *MockOSMockRecorder) IsTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTimeout", reflect.TypeOf((*MockOS)(nil).IsTimeout), arg0)
}

// Lchown mocks base method.
func (m *MockOS) Lchown(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lchown", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lchown indicates an expected call of Lchown.
func (mr *MockOSMockRecorder) Lchown(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lchown", reflect.TypeOf((*MockOS)(nil).Lchown), arg0, arg1, arg2)
}

// Link mocks base method.
func (m *MockOS) Link(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Link indicates an expected call of Link.
func (mr *MockOSMockRecorder) Link(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockOS)(nil).Link), arg0, arg1)
}

// LookupEnv mocks base method.
func (m *MockOS) LookupEnv(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockOSMockRecorder) LookupEnv(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockOS)(nil).LookupEnv), arg0)
}

// Lstat mocks base method.
func (m *MockOS) Lstat(arg0 string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", arg0)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat.
func (mr *MockOSMockRecorder) Lstat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockOS)(nil).Lstat), arg0)
}

// Mkdir mocks base method.
func (m *MockOS) Mkdir(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockOSMockRecorder) Mkdir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockOS)(nil).Mkdir), arg0, arg1)
}

// MkdirAll mocks base method.
func (m *MockOS) MkdirAll(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockOSMockRecorder) MkdirAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockOS)(nil).MkdirAll), arg0, arg1)
}

// MkdirTemp mocks base method.
func (m *MockOS) MkdirTemp(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirTemp", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MkdirTemp indicates an expected call of MkdirTemp.
func (mr *MockOSMockRecorder) MkdirTemp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirTemp", reflect.TypeOf((*MockOS)(nil).MkdirTemp), arg0, arg1)
}

// NewFile mocks base method.
func (m *MockOS) NewFile(arg0 uintptr, arg1 string) os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", arg0, arg1)
	ret0, _ := ret[0].(os.File)
	return ret0
}

// NewFile indicates an expected call of NewFile.
func (mr *MockOSMockRecorder) NewFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockOS)(nil).NewFile), arg0, arg1)
}

// NewSyscallError mocks base method.
func (m *MockOS) NewSyscallError(arg0 string, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSyscallError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSyscallError indicates an expected call of NewSyscallError.
func (mr *MockOSMockRecorder) NewSyscallError(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSyscallError", reflect.TypeOf((*MockOS)(nil).NewSyscallError), arg0, arg1)
}

// Open mocks base method.
func (m *MockOS) Open(arg0 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOSMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOS)(nil).Open), arg0)
}

// OpenFile mocks base method.
func (m *MockOS) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockOSMockRecorder) OpenFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockOS)(nil).OpenFile), arg0, arg1, arg2)
}

// OpenInRoot mocks base method.
func (m *MockOS) OpenInRoot(arg0, arg1 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInRoot", arg0, arg1)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenInRoot indicates an expected call of OpenInRoot.
func (mr *MockOSMockRecorder) OpenInRoot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInRoot", reflect.TypeOf((*MockOS)(nil).OpenInRoot), arg0, arg1)
}

// OpenRoot mocks base method.
func (m *MockOS) OpenRoot(arg0 string) (os.Root, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRoot", arg0)
	ret0, _ := ret[0].(os.Root)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenRoot indicates an expected call of OpenRoot.
func (mr *MockOSMockRecorder) OpenRoot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRoot", reflect.TypeOf((*MockOS)(nil).OpenRoot), arg0)
}

// Pipe mocks base method.
func (m *MockOS) Pipe() (os.File, os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe")
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(os.File)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pipe indicates an expected call of Pipe.
func (mr *MockOSMockRecorder) Pipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockOS)(nil).Pipe))
}

// ReadDir mocks base method.
func (m *MockOS) ReadDir(arg0 string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockOSMockRecorder) ReadDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockOS)(nil).ReadDir), arg0)
}

// ReadFile mocks base method.
func (m *MockOS) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockOSMockRecorder) ReadFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockOS)(nil).ReadFile), arg0)
}

// Readlink mocks base method.
func (m *MockOS) Readlink(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readlink", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readlink indicates an expected call of Readlink.
func (mr *MockOSMockRecorder) Readlink(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readlink", reflect.TypeOf((*MockOS)(nil).Readlink), arg0)
}

// Remove mocks base method.
func (m *MockOS) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockOSMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOS)(nil).Remove), arg0)
}

// RemoveAll mocks base method.
func (m *MockOS) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockOSMockRecorder) RemoveAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockOS)(nil).RemoveAll), arg0)
}

// Rename mocks base method.
func (m *MockOS) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockOSMockRecorder) Rename(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockOS)(nil).Rename), arg0, arg1)
}

// SameFile mocks base method.
func (m *MockOS) SameFile(arg0, arg1 fs0.FileInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SameFile", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SameFile indicates an expected call of SameFile.
func (mr *MockOSMockRecorder) SameFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SameFile", reflect.TypeOf((*MockOS)(nil).SameFile), arg0, arg1)
}

// Setenv mocks base method.
func (m *MockOS) Setenv(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv.
func (mr *MockOSMockRecorder) Setenv(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockOS)(nil).Setenv), arg0, arg1)
}

// StartProcess mocks base method.
func (m *MockOS) StartProcess(arg0 string, arg1 []string, arg2 *os0.ProcAttr) (os.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", arg0, arg1, arg2)
	ret0, _ := ret[0].(os.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockOSMockRecorder) StartProcess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockOS)(nil).StartProcess), arg0, arg1, arg2)
}

// Stat mocks base method.
func (m *MockOS) Stat(arg0 string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSMockRecorder) Stat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOS)(nil).Stat), arg0)
}

// Stderr mocks base method.
func (m *MockOS) Stderr() os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(os.File)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockOSMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockOS)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockOS) Stdin() os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(os.File)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockOSMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockOS)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockOS) Stdout() os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(os.File)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockOSMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockOS)(nil).Stdout))
}

// Symlink mocks base method.
func (m *MockOS) Symlink(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Symlink indicates an expected call of Symlink.
func (mr *MockOSMockRecorder) Symlink(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockOS)(nil).Symlink), arg0, arg1)
}

// TempDir mocks base method.
func (m *MockOS) TempDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// TempDir indicates an expected call of TempDir.
func (mr *MockOSMockRecorder) TempDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockOS)(nil).TempDir))
}

// Truncate mocks base method.
func (m *MockOS) Truncate(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockOSMockRecorder) Truncate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockOS)(nil).Truncate), arg0, arg1)
}

// Unsetenv mocks base method.
func (m *MockOS) Unsetenv(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsetenv", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsetenv indicates an expected call of Unsetenv.
func (mr *MockOSMockRecorder) Unsetenv(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsetenv", reflect.TypeOf((*MockOS)(nil).Unsetenv), arg0)
}

// UserCacheDir mocks base method.
func (m *MockOS) UserCacheDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCacheDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCacheDir indicates an expected call of UserCacheDir.
func (mr *MockOSMockRecorder) UserCacheDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCacheDir", reflect.TypeOf((*MockOS)(nil).UserCacheDir))
}

// UserConfigDir mocks base method.
func (m *MockOS) UserConfigDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserConfigDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserConfigDir indicates an expected call of UserConfigDir.
func (mr *MockOSMockRecorder) UserConfigDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserConfigDir", reflect.TypeOf((*MockOS)(nil).UserConfigDir))
}

// UserHomeDir mocks base method.
func (m *MockOS) UserHomeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHomeDir indicates an expected call of UserHomeDir.
func (mr *MockOSMockRecorder) UserHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHomeDir", reflect.TypeOf((*MockOS)(nil).UserHomeDir))
}

// WriteFile mocks base method.
func (m *MockOS) WriteFile(arg0 string, arg1 []byte, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockOSMockRecorder) WriteFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockOS)(nil).WriteFile), arg0, arg1, arg2)
}

// MockProcess is a mock of Process interface.
type MockProcess struct {
	ctrl     *gomock.Controller
	recorder *MockProcessMockRecorder
	isgomock struct{}
}

// MockProcessMockRecorder is the mock recorder for MockProcess.
type MockProcessMockRecorder struct {
	mock *MockProcess
}

// NewMockProcess creates a new mock instance.
func NewMockProcess(ctrl *gomock.Controller) *MockProcess {
	mock := &MockProcess{ctrl: ctrl}
	mock.recorder = &MockProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcess) EXPECT() *MockProcessMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockProcess) Kill() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill")
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockProcessMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockProcess)(nil).Kill))
}

// Nub mocks base method.
func (m *MockProcess) Nub() *os0.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nub")
	ret0, _ := ret[0].(*os0.Process)
	return ret0
}

// Nub indicates an expected call of Nub.
func (mr *MockProcessMockRecorder) Nub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nub", reflect.TypeOf((*MockProcess)(nil).Nub))
}

// PID mocks base method.
func (m *MockProcess) PID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PID")
	ret0, _ := ret[0].(int)
	return ret0
}

// PID indicates an expected call of PID.
func (mr *MockProcessMockRecorder) PID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PID", reflect.TypeOf((*MockProcess)(nil).PID))
}

// Release mocks base method.
func (m *MockProcess) Release() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockProcessMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockProcess)(nil).Release))
}

// Signal mocks base method.
func (m *MockProcess) Signal(arg0 os0.Signal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signal indicates an expected call of Signal.
func (mr *MockProcessMockRecorder) Signal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockProcess)(nil).Signal), arg0)
}

// Wait mocks base method.
func (m *MockProcess) Wait() (*os0.ProcessState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(*os0.ProcessState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockProcessMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockProcess)(nil).Wait))
}

// MockRoot is a mock of Root interface.
type MockRoot struct {
	ctrl     *gomock.Controller
	recorder *MockRootMockRecorder
	isgomock struct{}
}

// MockRootMockRecorder is the mock recorder for MockRoot.
type MockRootMockRecorder struct {
	mock *MockRoot
}

// NewMockRoot creates a new mock instance.
func NewMockRoot(ctrl *gomock.Controller) *MockRoot {
	mock := &MockRoot{ctrl: ctrl}
	mock.recorder = &MockRootMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoot) EXPECT() *MockRootMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRoot) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRootMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoot)(nil).Close))
}

// Create mocks base method.
func (m *MockRoot) Create(arg0 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRootMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoot)(nil).Create), arg0)
}

// FS mocks base method.
func (m *MockRoot) FS() fs0.FS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FS")
	ret0, _ := ret[0].(fs0.FS)
	return ret0
}

// FS indicates an expected call of FS.
func (mr *MockRootMockRecorder) FS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FS", reflect.TypeOf((*MockRoot)(nil).FS))
}

// Lstat mocks base method.
func (m *MockRoot) Lstat(arg0 string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", arg0)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat.
func (mr *MockRootMockRecorder) Lstat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockRoot)(nil).Lstat), arg0)
}

// Mkdir mocks base method.
func (m *MockRoot) Mkdir(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockRootMockRecorder) Mkdir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockRoot)(nil).Mkdir), arg0, arg1)
}

// Name mocks base method.
func (m *MockRoot) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRootMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRoot)(nil).Name))
}

// Nub mocks base method.
func (m *MockRoot) Nub() *os0.Root {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nub")
	ret0, _ := ret[0].(*os0.Root)
	return ret0
}

// Nub indicates an expected call of Nub.
func (mr *MockRootMockRecorder) Nub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nub", reflect.TypeOf((*MockRoot)(nil).Nub))
}

// Open mocks base method.
func (m *MockRoot) Open(arg0 string) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockRootMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRoot)(nil).Open), arg0)
}

// OpenFile mocks base method.
func (m *MockRoot) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockRootMockRecorder) OpenFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockRoot)(nil).OpenFile), arg0, arg1, arg2)
}

// OpenRoot mocks base method.
func (m *MockRoot) OpenRoot(arg0 string) (os.Root, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRoot", arg0)
	ret0, _ := ret[0].(os.Root)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenRoot indicates an expected call of OpenRoot.
func (mr *MockRootMockRecorder) OpenRoot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRoot", reflect.TypeOf((*MockRoot)(nil).OpenRoot), arg0)
}

// Remove mocks base method.
func (m *MockRoot) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRootMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRoot)(nil).Remove), arg0)
}

// Stat mocks base method.
func (m *MockRoot) Stat(arg0 string) (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockRootMockRecorder) Stat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockRoot)(nil).Stat), arg0)
}
