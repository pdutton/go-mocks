// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pdutton/go-interfaces/sync (interfaces: Cond,Locker,Map,Mutex,Once,Pool,RWMutex,WaitGroup)
//
// Generated by this command:
//
//	mockgen -destination sync/mock_sync/all.go github.com/pdutton/go-interfaces/sync Cond,Locker,Map,Mutex,Once,Pool,RWMutex,WaitGroup
//

// Package mock_sync is a generated GoMock package.
package mock_sync

import (
	reflect "reflect"
	sync "sync"

	gomock "go.uber.org/mock/gomock"
)

// MockCond is a mock of Cond interface.
type MockCond struct {
	ctrl     *gomock.Controller
	recorder *MockCondMockRecorder
	isgomock struct{}
}

// MockCondMockRecorder is the mock recorder for MockCond.
type MockCondMockRecorder struct {
	mock *MockCond
}

// NewMockCond creates a new mock instance.
func NewMockCond(ctrl *gomock.Controller) *MockCond {
	mock := &MockCond{ctrl: ctrl}
	mock.recorder = &MockCondMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCond) EXPECT() *MockCondMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockCond) Broadcast() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast")
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockCondMockRecorder) Broadcast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockCond)(nil).Broadcast))
}

// Signal mocks base method.
func (m *MockCond) Signal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signal")
}

// Signal indicates an expected call of Signal.
func (mr *MockCondMockRecorder) Signal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockCond)(nil).Signal))
}

// Wait mocks base method.
func (m *MockCond) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockCondMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCond)(nil).Wait))
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
	isgomock struct{}
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLocker) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockLockerMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockLocker) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock))
}

// MockMap is a mock of Map interface.
type MockMap struct {
	ctrl     *gomock.Controller
	recorder *MockMapMockRecorder
	isgomock struct{}
}

// MockMapMockRecorder is the mock recorder for MockMap.
type MockMapMockRecorder struct {
	mock *MockMap
}

// NewMockMap creates a new mock instance.
func NewMockMap(ctrl *gomock.Controller) *MockMap {
	mock := &MockMap{ctrl: ctrl}
	mock.recorder = &MockMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMap) EXPECT() *MockMapMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockMap) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockMapMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockMap)(nil).Clear))
}

// CompareAndDelete mocks base method.
func (m *MockMap) CompareAndDelete(arg0, arg1 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareAndDelete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareAndDelete indicates an expected call of CompareAndDelete.
func (mr *MockMapMockRecorder) CompareAndDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareAndDelete", reflect.TypeOf((*MockMap)(nil).CompareAndDelete), arg0, arg1)
}

// CompareAndSwap mocks base method.
func (m *MockMap) CompareAndSwap(arg0, arg1, arg2 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareAndSwap", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareAndSwap indicates an expected call of CompareAndSwap.
func (mr *MockMapMockRecorder) CompareAndSwap(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareAndSwap", reflect.TypeOf((*MockMap)(nil).CompareAndSwap), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockMap) Delete(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockMapMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMap)(nil).Delete), arg0)
}

// Load mocks base method.
func (m *MockMap) Load(arg0 any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockMapMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockMap)(nil).Load), arg0)
}

// LoadAndDelete mocks base method.
func (m *MockMap) LoadAndDelete(arg0 any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndDelete", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadAndDelete indicates an expected call of LoadAndDelete.
func (mr *MockMapMockRecorder) LoadAndDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndDelete", reflect.TypeOf((*MockMap)(nil).LoadAndDelete), arg0)
}

// LoadOrStore mocks base method.
func (m *MockMap) LoadOrStore(arg0, arg1 any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStore", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadOrStore indicates an expected call of LoadOrStore.
func (mr *MockMapMockRecorder) LoadOrStore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStore", reflect.TypeOf((*MockMap)(nil).LoadOrStore), arg0, arg1)
}

// Range mocks base method.
func (m *MockMap) Range(arg0 func(any, any) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", arg0)
}

// Range indicates an expected call of Range.
func (mr *MockMapMockRecorder) Range(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockMap)(nil).Range), arg0)
}

// Store mocks base method.
func (m *MockMap) Store(arg0, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", arg0, arg1)
}

// Store indicates an expected call of Store.
func (mr *MockMapMockRecorder) Store(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMap)(nil).Store), arg0, arg1)
}

// Swap mocks base method.
func (m *MockMap) Swap(arg0, arg1 any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swap", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Swap indicates an expected call of Swap.
func (mr *MockMapMockRecorder) Swap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swap", reflect.TypeOf((*MockMap)(nil).Swap), arg0, arg1)
}

// MockMutex is a mock of Mutex interface.
type MockMutex struct {
	ctrl     *gomock.Controller
	recorder *MockMutexMockRecorder
	isgomock struct{}
}

// MockMutexMockRecorder is the mock recorder for MockMutex.
type MockMutexMockRecorder struct {
	mock *MockMutex
}

// NewMockMutex creates a new mock instance.
func NewMockMutex(ctrl *gomock.Controller) *MockMutex {
	mock := &MockMutex{ctrl: ctrl}
	mock.recorder = &MockMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutex) EXPECT() *MockMutexMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockMutex) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockMutexMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockMutex)(nil).Lock))
}

// TryLock mocks base method.
func (m *MockMutex) TryLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryLock indicates an expected call of TryLock.
func (mr *MockMutexMockRecorder) TryLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockMutex)(nil).TryLock))
}

// Unlock mocks base method.
func (m *MockMutex) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockMutexMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockMutex)(nil).Unlock))
}

// MockOnce is a mock of Once interface.
type MockOnce struct {
	ctrl     *gomock.Controller
	recorder *MockOnceMockRecorder
	isgomock struct{}
}

// MockOnceMockRecorder is the mock recorder for MockOnce.
type MockOnceMockRecorder struct {
	mock *MockOnce
}

// NewMockOnce creates a new mock instance.
func NewMockOnce(ctrl *gomock.Controller) *MockOnce {
	mock := &MockOnce{ctrl: ctrl}
	mock.recorder = &MockOnceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnce) EXPECT() *MockOnceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockOnce) Do(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Do", arg0)
}

// Do indicates an expected call of Do.
func (mr *MockOnceMockRecorder) Do(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockOnce)(nil).Do), arg0)
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPool) Get() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPoolMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPool)(nil).Get))
}

// Put mocks base method.
func (m *MockPool) Put(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put.
func (mr *MockPoolMockRecorder) Put(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPool)(nil).Put), arg0)
}

// MockRWMutex is a mock of RWMutex interface.
type MockRWMutex struct {
	ctrl     *gomock.Controller
	recorder *MockRWMutexMockRecorder
	isgomock struct{}
}

// MockRWMutexMockRecorder is the mock recorder for MockRWMutex.
type MockRWMutexMockRecorder struct {
	mock *MockRWMutex
}

// NewMockRWMutex creates a new mock instance.
func NewMockRWMutex(ctrl *gomock.Controller) *MockRWMutex {
	mock := &MockRWMutex{ctrl: ctrl}
	mock.recorder = &MockRWMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWMutex) EXPECT() *MockRWMutexMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockRWMutex) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockRWMutexMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockRWMutex)(nil).Lock))
}

// RLock mocks base method.
func (m *MockRWMutex) RLock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RLock")
}

// RLock indicates an expected call of RLock.
func (mr *MockRWMutexMockRecorder) RLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLock", reflect.TypeOf((*MockRWMutex)(nil).RLock))
}

// RLocker mocks base method.
func (m *MockRWMutex) RLocker() sync.Locker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RLocker")
	ret0, _ := ret[0].(sync.Locker)
	return ret0
}

// RLocker indicates an expected call of RLocker.
func (mr *MockRWMutexMockRecorder) RLocker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RLocker", reflect.TypeOf((*MockRWMutex)(nil).RLocker))
}

// RUnlock mocks base method.
func (m *MockRWMutex) RUnlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RUnlock")
}

// RUnlock indicates an expected call of RUnlock.
func (mr *MockRWMutexMockRecorder) RUnlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RUnlock", reflect.TypeOf((*MockRWMutex)(nil).RUnlock))
}

// TryLock mocks base method.
func (m *MockRWMutex) TryLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryLock indicates an expected call of TryLock.
func (mr *MockRWMutexMockRecorder) TryLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockRWMutex)(nil).TryLock))
}

// TryRLock mocks base method.
func (m *MockRWMutex) TryRLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryRLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryRLock indicates an expected call of TryRLock.
func (mr *MockRWMutexMockRecorder) TryRLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryRLock", reflect.TypeOf((*MockRWMutex)(nil).TryRLock))
}

// Unlock mocks base method.
func (m *MockRWMutex) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockRWMutexMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockRWMutex)(nil).Unlock))
}

// MockWaitGroup is a mock of WaitGroup interface.
type MockWaitGroup struct {
	ctrl     *gomock.Controller
	recorder *MockWaitGroupMockRecorder
	isgomock struct{}
}

// MockWaitGroupMockRecorder is the mock recorder for MockWaitGroup.
type MockWaitGroupMockRecorder struct {
	mock *MockWaitGroup
}

// NewMockWaitGroup creates a new mock instance.
func NewMockWaitGroup(ctrl *gomock.Controller) *MockWaitGroup {
	mock := &MockWaitGroup{ctrl: ctrl}
	mock.recorder = &MockWaitGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitGroup) EXPECT() *MockWaitGroupMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWaitGroup) Add(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockWaitGroupMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWaitGroup)(nil).Add), arg0)
}

// Done mocks base method.
func (m *MockWaitGroup) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockWaitGroupMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockWaitGroup)(nil).Done))
}

// Wait mocks base method.
func (m *MockWaitGroup) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockWaitGroupMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockWaitGroup)(nil).Wait))
}
